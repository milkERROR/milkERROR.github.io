<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机基础知识</title>
    <link href="/2023/09/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/09/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="计算机机房等级"><a href="#计算机机房等级" class="headerlink" title="计算机机房等级"></a>计算机机房等级</h3><p>A级为最高级别，主要指涉及国计民生的机房设计。 其电子信息系统运行中断将造成重大的经济损或公共场所秩序严重混乱。 像国家气象台；国家级信息中心、计算中心；重要的军事指挥部门；大中城市的机场、广播电台、电视台、应急指挥中心；银行总行等属A级机房。 B级为电子信息系统运行中断将造成一定的社会秩序混乱和一定的经济损失的机房。 科研院所；高等院校；三级医院；大中城市的气象台、信息中心、疾病预防与控制中心、电力调度中心、交通（铁路、公路、水运）指挥调度中心；国际会议中心；国际体育比赛场馆；省部级以上政府办公楼等属B级机房。 A级或B级范围之外的电子信息系统机房为C级。</p><h3 id="计算机病毒分类"><a href="#计算机病毒分类" class="headerlink" title="计算机病毒分类"></a>计算机病毒分类</h3><p>1、木马病毒。<br>木马病毒其前缀是：Trojan，其共有特性以盗取用户信息为目的。</p><p>2、系统病毒。<br>系统病毒的前缀为：Win32、PE、Win95、W32、W95等。其主要感染windows系统的可执行文件。</p><p>3、蠕虫病毒。<br>蠕虫病毒的前缀是：Worm。其主要是通过网络或者系统漏洞进行传播</p><p>4、脚本病毒。<br>脚本病毒的前缀是：Script。其特点是采用脚本语言编写。</p><p>5、后门病毒。<br>后门病毒的前缀是：Backdoor。其通过网络传播，并在系统中打开后门。</p><p>6、宏病毒。<br>其实宏病毒是也是脚本病毒的一种，其利用ms office文档中的宏进行传播。</p><p>7、破坏性程序病毒。<br>破坏性程序病毒的前缀是：Harm。其一般会对系统造成明显的破坏，如格式化硬盘等。</p><p>8、玩笑病毒。<br>玩笑病毒的前缀是：Joke。是恶作剧性质的病毒，通常不会造成实质性的破坏。</p><p>9、捆绑机病毒<br>捆绑机病毒的前缀是：Binder。这是一类会和其它特定应用程序捆绑在一起的病毒。<br>这种病毒用它自已的程序意图加入或取代部分操作系统进行工作，具有很强的破坏力，可以导致整个系统的瘫痪。圆点病毒和大麻病毒就是典型的操作系统型病毒。</p><h6 id="良性计算机病毒"><a href="#良性计算机病毒" class="headerlink" title="良性计算机病毒"></a>良性计算机病毒</h6><p>良性病毒是指其不包含有立即对计算机系统产生直接破坏作用的代码。这类病毒为了表现其存在，只是不停地进行扩散，从一台计算机传染到另一台，并不破坏计算机内的数据。有些人对这类计算机病毒的传染不以为然，认为这只是恶作剧，没什么关系。其实良性、恶性都是相对而言的。良性病毒取得系统控制权后，会导致整个系统和应用程序争抢CPU的控制权，时时导致整个系统死锁，给正常操作带来麻烦。有时系统内还会出现几种病毒交叉感染的现象，一个文件不停地反复被几种病毒所感染。例如原来只有10KB存储空间，而且整个计算机系统也由于多种病毒寄生于其中而无法正常工作。因此也不能轻视所谓良性病毒对计算机系统造成的损害。</p><h6 id="源码型病毒"><a href="#源码型病毒" class="headerlink" title="源码型病毒"></a>源码型病毒</h6><p>该病毒攻击高级语言编写的程序，该病毒在高级语言所编写的程序编译前插入到原程序中，经编译成为合法程序的一部分。</p><p>注意区分宏病毒和文件型病毒：</p><h6 id="宏病毒"><a href="#宏病毒" class="headerlink" title="宏病毒"></a>宏病毒</h6><p>是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会 “感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。</p><h6 id="文件型病毒"><a href="#文件型病毒" class="headerlink" title="文件型病毒"></a>文件型病毒</h6><p>是主要感染可执行文件的病毒，它通常隐藏在宿主程序中，执行宿主程序时，将会先执行病毒程序再执行宿主程序。<br>传播方式当宿主程序运行时，病毒程序首先运行，然后驻留在内存中，再伺机感染其它的可执行程序，达到传播的目的。</p><h3 id="零散知识"><a href="#零散知识" class="headerlink" title="零散知识"></a>零散知识</h3><p>计算机安全通常包括硬件、软件、数据和操作。</p><p>正确退出word 2010的键盘操作为：alt+F4</p><p>微型计算机的系统总线是CPU与其他部件之间传递信息的公共通道，这些通道包括：数据、地址、控制。<br>DDoS技术鉴赏</p><p>DoS（Denial of Service）： 拒绝服务，通过发送大量的连接攻击，占用网络服务的资源，从而拒绝正常的业务流量的一种网络攻击方式。</p><p>DDoS（Distributed denial of service）： 分布式拒绝服务。单台设备攻击能力有限，但是当几十几百台设备组成一个网络同时对目标发起DoS攻击时，就是一场灾难。因而大家常用DDoS指代一般意义的拒绝服务攻击，而发起攻击的网络一般成为僵尸网络（BotNet），每个僵尸可以是电脑、服务器、智能手机。有时是通过木马、蠕虫、后门等恶意程序感染大量设备，形成僵尸网络；也可以通过某些渠道花钱买到。<br>互联网的工作方式</p><p>依靠TCP&#x2F;IP参考模型进行信息传递。TCP&#x2F;IP参考模型是一个四层结构。</p><p>只需要向一台服务器发送大量的IP协议数据包，就可以慢慢消耗掉对方的网络带宽。如ping工具就能发起一次ICMP攻击。ICMP是IP协议（互联网层）中用来进行差错控制的一个补充。使用大量ICMP协议包进行的攻击被称为ICMP洪水攻击（ICMP flood）。</p><p>我们还可以发送传输层的UDP协议包，发起UDP洪水攻击。由于这种攻击暴露了IP地址，这种攻击需要伪造IP地址，否则该IP可以被封禁。还有另一种反射攻击。即将发件地址改为攻击目标的IP地址，再将收件地址设置为互联网上大量的第三方机器，从而把数据发送到这些第三方机器上，回复的数据会涌入发件地址指向的攻击目标。这些第三方机器被称为反射器。这样的攻击更难追踪攻击的来源。在此基础上，人们还发明了一种放大攻击效果的方法，</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows系统维护</title>
    <link href="/2023/09/11/Windows%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    <url>/2023/09/11/Windows%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注：新大陆系统的newland用户无密码</p></blockquote><h2 id="赛题01"><a href="#赛题01" class="headerlink" title="赛题01"></a>赛题01</h2><ul><li>使用过程发现局域网内网络设备无法获取到有效IP，请配置DHCP服务分配的IP从172.16.【工位号】.150开始至172.16.【工位号】.200结束，并启用服务。</li><li>在工作站计算机中使用DOS窗口测试服务器计算机8005端口是否连接通畅。</li><li>公司某台电脑配置了两块网卡，同时连接内外两个网络，外网(192.168.0.3&#x2F;24,网关:192.168.0.254)和内网(192.168.67.12&#x2F;24，网关：192.168.67.254)。该电脑现在要访问一台公司打印机（192.168.14.241&#x2F;24，属于内网网络）一直打不开页面，跟踪打印机ip路由显示如下, 请从图中找出问题所在，通过命令行解决。：</li></ul><p><img src="/img/articles/windows/01%E9%A2%98.png"></p><p>完成以上任务后请做以下步骤：</p><ul><li>请将设置DHCP分配IP范围界面截图，另存为B-1-1.jpg。</li><li>请将工作站计算机使用DOS窗口测试服务器计算机8005端口连接是否通畅的界面截图，要求截图可以看到已经连接到服务器计算机8005端口的结果，另存为B-1-2.jpg。</li><li>写出跟踪打印机ip路由的命令行语句，另存为B-1-3.txt。</li><li>写出图中打印机无法访问的原因，另存为B-1-4.txt。</li><li>写出解决打印机无法访问的命令行语句，另存为B-1-5.txt。重新跟踪打印机IP路由，将更新后的ip路由查询结果截图，另存为B-1-6.jpg。</li></ul><h4 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h4><ol><li>在路由器后台进行DHCP配置</li><li>先打开服务器的8005端口，在工作站上输入命令：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">telnet</span> <span class="hljs-number">172.18.1.11</span> <span class="hljs-number">8005</span><br></code></pre></td></tr></table></figure><ol start="3"><li>跟踪路由</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">tracert</span> -d + <span class="hljs-built_in">ip</span>/域名<br></code></pre></td></tr></table></figure><ol start="4"><li><p>打印机和电脑目前使用的网卡不在同一网段。路由表混乱。</p></li><li><p>配置一条新的路由表：</p></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">route</span> add -p <span class="hljs-number">192.168.14.241</span> mask <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">192.168.67.254</span><br></code></pre></td></tr></table></figure><p>重新跟踪路由：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tracert</span> -d <span class="hljs-number">192.168.14.241</span><br></code></pre></td></tr></table></figure><h2 id="赛题02"><a href="#赛题02" class="headerlink" title="赛题02"></a>赛题02</h2><p><img src="/img/articles/windows/02%E9%A2%981.jpg"></p><ul><li>在项目实施和调试过程中，按照上图和配置信息搭建的环境，物联网中心网关无法采集传感器实时数据，请找出上图错误的地方。</li><li>请用U盘资料中的“NetAsstant”工具，辅助计算下表更改设备地址的数据帧的CRC校验值。</li></ul><p><img src="/img/articles/windows/02%E9%A2%982.jpg"></p><h4 id="⭐物联网设备调试"><a href="#⭐物联网设备调试" class="headerlink" title="⭐物联网设备调试"></a>⭐物联网设备调试</h4><ol><li>网关未通电，zigbee协调器未连接网关，无法传输数据。（把接网关的节点换成协调器）</li><li>不会！！！！！完全看不懂什么东西</li></ol><h2 id="赛题03"><a href="#赛题03" class="headerlink" title="赛题03"></a>赛题03</h2><ul><li>请将配置规则“禁止工作站计算机访问本机任何程序或者端口，暂不启用此规则”的结果界面截图，另存为B-2-1.jpg。</li><li>请将使用命令窗口查询TCP&#x2F;IP数据包从工作站计算机到云平台服务器所通过的路由的结果界面截图，另存为B-2-2.jpg</li><li>请将配置服务器计算机关闭远程连接功能的界面截图，另存为B-2-3.jpg。</li><li>请将通过控制台命令查询服务器开启哪些服务的界面截图，另存为B-2-4.jpg。</li></ul><h4 id="控制面板-终端"><a href="#控制面板-终端" class="headerlink" title="控制面板+终端"></a>控制面板+终端</h4><ol><li><strong>配置规则</strong>：</li></ol><p>a. 控制面板-系统和安全-Windows Defender防火墙-高级设置</p><p>b.入站规则-新建规则</p><p>c.自定义-所有程序-协议类型：任何-指定ip（工作站计算机ip）-阻止连接-三个全勾选–禁止工作站计算机访问本机任何程序或端口</p><p>d.找到入站规则中刚刚添加的-右键-禁用规则</p><ol><li><strong>路由跟踪</strong>：</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">tracert</span> <span class="hljs-built_in">ip</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>配置关闭远程连接功能</strong>：</li></ol><p>控制面板-系统安全-系统-远程设置-勾选“不允许远程连接到此电脑”-确定</p><ol start="3"><li><strong>查询服务器开启哪些服务</strong>：</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">services.msc    <span class="hljs-comment"># 打开服务窗口</span><br>net <span class="hljs-literal">start</span>       <span class="hljs-comment"># 查询已开启的服务</span><br></code></pre></td></tr></table></figure><h2 id="赛题04"><a href="#赛题04" class="headerlink" title="赛题04"></a>赛题04</h2><ul><li>在服务器计算机上启用审核帐户登录成功的事件，以便该域计算机从事件查看器中查看成功登录过的帐户，将配置界面截图，另存为B-2-1.jpg。</li><li>在服务器计算机上设置指定当拒绝用户访问文件或文件夹时要显示的自定义消息，当拒绝方问的用户显示以下信息“您的访问已被拒绝，请联系管理员”，将配置界面截图，另存为B-2-2.jpg。</li><li>在服务器计算机上配置等待设备安装任务完成的秒数，把设备安装超时设为300秒，将配置界面截图，另存为B-2-3.jpg。</li><li>配置服务器计算机关闭远程连接功能，请将配置界面截图，另存为B-2-4.jpg。</li></ul><h4 id="本地组策略编辑器"><a href="#本地组策略编辑器" class="headerlink" title="本地组策略编辑器"></a>本地组策略编辑器</h4><p>win+r，输入gpedit.msc，打开本地组策略编辑器。</p><ol><li><strong>计算机配置-Windows配置-安全配置-本地策略-审核策略-审核账户登录策略-成功</strong></li><li><strong>计算机配置-管理模板-系统-访问被拒绝协助-已启用-注释</strong></li><li><strong>计算机配置-管理模板-系统-设备安装-配置设备安装超时-已启用-300</strong></li><li><strong>配置关闭远程连接功能</strong>【同上】：</li></ol><p>控制面板-系统安全-系统-远程设置-勾选“不允许远程连接到此电脑”-确定</p><h2 id="赛题05"><a href="#赛题05" class="headerlink" title="赛题05"></a>赛题05</h2><ul><li>系统在使用过程中，需要用到使用域名访问本地程序。请选手修改操作系统的相关配置文件，使我们可以在服务器计算机的浏览器中 输入<a href="http://www.nlecloud.com/">www.nlecloud.com</a> 域名就可以访问赛场提供的云平台（公平台服务器IP地址为 192.168.0.138）。请在服务器计算机中打开修改域名与本地IP绑定配置的文件并截图，另存为B-1-1.jpg，要求截图中用红圈圈出要求配置的关键信息。</li><li>配置完本地域名后有时候会出现DNS缓存刷新延迟，导致域名配置不生效，请选手在控制台程序中通过一条命令刷新本地DNS缓存。请将服务器计算机使用命名刷新DNS缓存成功的界面截图，另存为B-1-2.jpg，要求截图中用红圈圈出具体的命令信息。</li><li>出于安全考虑，需要设置服务器计算机的用户密码长度最低8位，密码有效时长为30天。请将服务器计算机配置用户密码安全策略界面截图，另存为B-1-3.jpg，要求截图中用红圈圈出要求配置的内容。</li></ul><ol><li>配置文件路径：</li></ol><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Windows\System32\drivers\etc\hosts<br></code></pre></td></tr></table></figure><p>在末尾添加一行：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.0.138</span> www.nlecloud.com<br></code></pre></td></tr></table></figure><ol start="2"><li>刷新DNS缓存刷新延迟：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig/flushdns<br></code></pre></td></tr></table></figure><h4 id="本地安全策略"><a href="#本地安全策略" class="headerlink" title="本地安全策略"></a>本地安全策略</h4><ol start="3"><li>win+r输入<strong>secpol.msc</strong>打开本地安全策略，<strong>账户策略-密码策略-密码长度最小值、密码最长使用期限</strong></li></ol><h2 id="赛题06"><a href="#赛题06" class="headerlink" title="赛题06"></a>赛题06</h2><ul><li>请在服务器计算机中打开修改域名与本地IP绑定配置的文件并截图，另存为B-1-1.jpg，要求截图中用红圈圈出要求配置的关键信息。</li><li>请将配置禁止Everyone权限应用在匿名用户上的界面截图，另存为B-1-2.jpg。</li><li>请将使用命令查询系统开始了哪些Windows服务的界面截图，另存为B-1-3.jpg，要求截图中用红圈圈出具体的命令。</li></ul><ol><li>同上。</li><li><strong>本地组策略编辑器-计算机配置-Windows设置-安全设置-本地策略-安全选项-网络访问：将Everyone权限应用于匿名用户-已禁用</strong></li><li>同上。</li></ol><h2 id="赛题07"><a href="#赛题07" class="headerlink" title="赛题07"></a>赛题07</h2><ul><li>执行将u盘的“竞赛资料”目录树结构生成到D-1-1.txt的命令行语句，将执行结果截图，另存为B-1-1.jpg。</li><li>在cmd窗口，将u盘的“竞赛资料&#x2F;模块D”下的text.txt拷贝到c:\doc下，并重命名为key_bak.txt（c:\doc目录当前不存在要求自动创建，若doc中也存在一个key_bak.txt文件，会询问否覆盖）。执行两次拷贝命令，出现询问是否覆盖的提示时截图，另存为B-1-2.jpg。同时将key_bak.txt也提交到U盘提交资料目录。</li><li>在key_bak.txt文件里查找“ok”字样，执行结果截图，另存为B-1-3.jpg。</li><li>在cmd窗口，只查看当前计算机的初始安装日期和系统启动时间，将查询结果界面截图，另存为B-1-4.jpg。</li><li>给工作站计算机添加myuser用户，授予远程关机的权限，然后从服务器计算机上进入cmd窗口，执行将工作站电脑关机指令（延时5秒），工作站电脑出现“正在关机”，计时5秒后，工作站关机。将工作站电脑出现“正在关机”的界面截图，另存为B-1-5.jpg。</li></ul><h6 id="第五题不会"><a href="#第五题不会" class="headerlink" title="第五题不会"></a>第五题不会</h6><h4 id="windows命令行"><a href="#windows命令行" class="headerlink" title="windows命令行"></a>windows命令行</h4><ol><li>生成目录树结构到txt：</li></ol><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">g:                         <span class="hljs-comment"># 进入U盘</span><br>cd .<span class="hljs-string">\竞赛资料</span>               <span class="hljs-comment"># 进入U盘下“竞赛资料”文件夹</span><br>tree G:<span class="hljs-string">\</span> &gt; D-<span class="hljs-number">1</span>-<span class="hljs-number">1.txt</span>       <span class="hljs-comment"># 将目录树结构生成到D-1-1.txt</span><br></code></pre></td></tr></table></figure><p>注：进入其他磁盘不用cd；<strong>进入本磁盘下目录用<code>cd</code>，<code>..</code>上一级，<code>./</code>下一级</strong></p><ol start="2"><li>拷贝文件并重命名：</li></ol><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">copy</span> g:\竞赛资料\模块D\<span class="hljs-type">text</span>.txt C:<span class="hljs-built_in">\doc</span>\key_bak.txt<br><span class="hljs-keyword">copy</span> source源 destination目标路径<br></code></pre></td></tr></table></figure><p>重命名：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">cd C:<span class="hljs-built_in">\doc</span><br><span class="hljs-keyword">rename</span> <span class="hljs-type">text</span>.txt key_bak.txt<br></code></pre></td></tr></table></figure><ol start="3"><li>查找ok字样：</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">find</span> <span class="hljs-string">&quot;ok&quot;</span> key_bak.txt<br><br><span class="hljs-keyword">find</span> <span class="hljs-string">&quot;字样&quot;</span> 路径/文件 &amp;&amp; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;成功&quot;</span> || <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不成功&quot;</span>  # 某文件查看字样，有显示成功，没有显示不成功<br><span class="hljs-keyword">find</span> <span class="hljs-string">&quot;ok&quot;</span> key_bak.txt &amp;&amp; <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;成功&quot;</span> || <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不成功&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>查看当前计算机的初始安装日期和系统启动时间：</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">systeminfo <span class="hljs-string">| findstr -i &quot;</span>初始安装日期 系统启动时间” <br></code></pre></td></tr></table></figure><p><img src="/img/articles/windows/07%E9%A2%98.jpg"></p><ol start="5"><li>在工作站上添加一个myuser用户：</li></ol><p>secpol.msc-本地策略-用户权限分配-从远程系统强制关机-添加用户或组-添加</p><p>[教程1](<a href="https://www.cnblogs.com/shenjieblog/p/5455691.html#:~:text=1.%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%90%E8%A1%8Cgpedit.msc%E6%89%93%E5%BC%80%E2%80%9C%E7%BB%84%E7%AD%96%E7%95%A5%E7%BC%96%E8%BE%91%E5%99%A8%E2%80%9C%EF%BC%9B">https://www.cnblogs.com/shenjieblog/p/5455691.html#:~:text=1.命令行运行gpedit.msc打开“组策略编辑器“；</a> 2.导航到“计算机配置%2FWindows 设置%2F安全设置%2F本地策略%2F用户权利指派”；,3.修改“ 从远端系统强制关机 ”，添加xxxx用户即可。)</p><h2 id="赛题08"><a href="#赛题08" class="headerlink" title="赛题08"></a>赛题08</h2><ul><li>用组策略将管理员账号administrator 重命名为newlandadmin,将配置界面截图,另存为B-1-1.jpg。</li><li>利用IP筛选器关闭端口2745，将该设置界面截屏，另存为B-1-2.jpg。</li><li>组策略屏蔽之前登录的用户信息，将该配置界面截屏另存为B-1-3.jpg。</li><li>通过组策略显示详细的开&#x2F;关机过程的设置界面截图,另存为B-1-4.jpg。</li><li>使用组策略禁止IE浏览器更改主页设置界面截图，另存为B-1-5.jpg。</li></ul><h4 id="本地组策略编辑器-1"><a href="#本地组策略编辑器-1" class="headerlink" title="本地组策略编辑器"></a>本地组策略编辑器</h4><p>win+r，输入gpedit.msc，打开本地组策略编辑器。</p><ol><li><p><strong>计算机配置-安全设置-本地策略-安全选项-账户：重命名系统管理员账户</strong></p><p><img src="/img/articles/windows/%E4%BD%BF%E7%94%A8%E7%BB%84%E7%AD%96%E7%95%A5%E9%87%8D%E5%91%BD%E5%90%8D%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E5%8F%B7.jpg"></p></li><li><p>**</p><p><img src="/img/articles/windows/%E5%88%A9%E7%94%A8ip%E7%AD%9B%E9%80%89%E5%99%A8%E5%85%B3%E9%97%AD%E7%AB%AF%E5%8F%A32745.jpg"></p><p>参考教程：<a href="https://blog.csdn.net/X_IT666/article/details/119995445#:~:text=Windows%E7%A6%81%E7%94%A8%E7%AB%AF%E5%8F%A3%EF%BC%88445%E7%AB%AF%E5%8F%A3%E4%B8%BA%E4%BE%8B%EF%BC%89">Windows禁用端口（445端口为例）</a></p><p>1 Win+R 输入gpedit.msc 回车进入本地组策略编辑器 计算机配置–&gt;Windows设置–&gt;安全设置–&gt;IP安全策略–&gt;创建IP安全策略 2 进入IP安全策略向导,协议–&gt; 协议类型：UDP 协议端口：从任意端口到445 7 两个都添加完后结果如下图： 8 点击确定，IP筛选列表–&gt;选择封端口 更多项目</p></li><li><p><strong>计算机配置-安全选项-本地策略-安全选项-交互式登陆：不显示上次登陆</strong>，启用。</p><p><img src="/img/articles/windows/%E7%BB%84%E7%AD%96%E7%95%A5%E5%B1%8F%E8%94%BD%E4%B9%8B%E5%89%8D%E7%99%BB%E5%BD%95%E7%9A%84%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.jpg"></p></li><li><p><strong>计算机配置-管理模块-系统-显示非常详细的状态消息</strong>，启用即可。</p><p><img src="/img/articles/windows/%E9%80%9A%E8%BF%87%E7%BB%84%E7%AD%96%E7%95%A5%E6%98%BE%E7%A4%BA%E8%AF%A6%E7%BB%86%E7%9A%84%E5%BC%80%E5%85%B3%E6%9C%BA%E8%BF%87%E7%A8%8B.jpg"></p></li><li><p><strong>用户配置-管理模块-windows组件-IE-禁用更改主页设置</strong>，启用。</p><p><img src="/img/articles/windows/%E4%BD%BF%E7%94%A8%E7%BB%84%E7%AD%96%E7%95%A5%E7%A6%81%E6%AD%A2IE%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9B%B4%E6%94%B9%E4%B8%BB%E9%A1%B5%E8%AE%BE%E7%BD%AE.jpg"></p></li></ol><h2 id="赛题09"><a href="#赛题09" class="headerlink" title="赛题09"></a>赛题09</h2><ul><li>安全审核是Windows最基本的入侵检测方法，当有人尝试对系统进行某种方式入侵的时候(如尝试用户密码,改变帐户策略和未经许可的文件访问等等)，都会被安全审核记录下来。</li></ul><p>利用组策略开启的审核方法如下：</p><ol><li>审核策略更改：成功,失败。</li><li>审核登陆事件：成功,失败。</li><li>审核特权使用：成功。</li><li>审核系统事件：成功,失败。</li><li>审核帐户管理：成功。</li><li>审核用户登陆事件：成功,失败。</li></ol><p>将安全审核策略配置界面截屏，另存为B-1-1.jpg。</p><ul><li>为了电脑安全，很多企业都选择利用组策略禁用USB接口，从而禁止U盘、移动硬盘的使用。主要配置方法如下：</li></ul><ol><li>“可移动磁盘：拒绝执行权限”；</li><li>“可移动磁盘：拒绝读取权限”；</li><li>“可移动磁盘：拒绝写入权限”。</li></ol><p>为电脑禁用USB接口的配置界面截屏，另存为B-1-2.jpg。</p><ul><li>为保证服务器计算机安全，请选手启用账户密码安全策略，要求密码最少需要8位长度，最长使用30天。请将配置服务器计算机账户密码安全策略结果界面截图，另存为B-1-3.jpg。</li><li>请选手通过dos窗口设置PC在10分钟后自动关机。请将在Dos窗口设置PC在10分钟后关机的界面截图，另存为B-1-4.jpg。</li><li>在服务器PC上配置策略，禁止工作站PC访问本机任何程序或端口。请将配置禁止工作站访问本机任何程序或端口的界面截图，另存为B-1-5.jpg。</li></ul><h4 id="本地组策略编辑器-关机命令"><a href="#本地组策略编辑器-关机命令" class="headerlink" title="本地组策略编辑器 + 关机命令"></a>本地组策略编辑器 + 关机命令</h4><ol><li>win + r 输入gpeidt.msc打开本地组策略编辑器，<strong>计算机配置-Windows配置-安全设置-本地策略-审核策略</strong>，按照1-6的要求配置即可。</li><li><strong>计算机配置-管理模板-系统-可移动存储访问</strong>，按照1-3的要求配置。</li><li><strong>计算机配置-Windows设置-安全设置-账户策略-密码策略-密码长度最小值、密码最长使用期限</strong></li><li>10分钟后关机：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">shutdown</span> -s -t <span class="hljs-number">600</span><br></code></pre></td></tr></table></figure><ol start="5"><li>同上【03】</li></ol><h2 id="赛题10"><a href="#赛题10" class="headerlink" title="赛题10"></a>赛题10</h2><ul><li>请将配置禁止工作站访问服务器计算机的规则配置结果界面截图，另存为B-1-1.jpg。要求截图中用红圈圈出要求配置的具体信息。</li><li>请将工作站电脑查看网络连接以及每个接口状态结果界面截图，另存为B-1-2.jpg。</li></ul><ol><li>同上【03】</li></ol><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><ol start="2"><li>查看网络连接以及每个接口状态：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>22年赛题</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu系统维护</title>
    <link href="/2023/09/10/Ubuntu%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    <url>/2023/09/10/Ubuntu%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>设置root用户密码：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo passwd root</span><br></code></pre></td></tr></table></figure><p>登录root用户：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">su root</span><br></code></pre></td></tr></table></figure><p>查看文件夹信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><p>查看文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/76827666">Ubuntu命令大全</a></p><h2 id="赛题01"><a href="#赛题01" class="headerlink" title="赛题01"></a>赛题01</h2><ul><li>使用SSH登录Ubuntu系统，将登录成功界面截图,另存为B-2-1.jpg。</li><li>请使用命令查询网络地址配置结果，请将查询结果界面截图（要求截图中可以看到具体的命令）,另存为B-2-2.jpg。</li><li>请将使用命令查询系统运行时间及负载的状态的界面截图,另存为B-2-3.jpg。</li><li>请将使用命令查看文件系统磁盘空间使用情况的界面截图，另存为B-2-4.jpg。</li><li>请将使用命令查看统计系统IO信息的界面截图，另存为B-2-5.jpg。</li></ul><ol><li>在服务器电脑上使用ssh登陆Ubuntu系统：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> 用户名<span class="hljs-variable">@ip</span>地址<br></code></pre></td></tr></table></figure><ol start="2"><li>查询网络地址配置：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><ol start="3"><li>查询系统运行时间以及负载状态：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uptime</span> <br>w<br></code></pre></td></tr></table></figure><ol start="4"><li>查看文件系统磁盘使用情况：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><ol start="5"><li>查看统计系统IO信息：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">iostat</span><br></code></pre></td></tr></table></figure><h2 id="赛题02"><a href="#赛题02" class="headerlink" title="赛题02"></a>赛题02</h2><ul><li>利用虚拟机管理工具成功登录Ubuntu系统后界面截图,另存为B-2-1.jpg。</li><li>完成虚拟机IP地址设置后，请使用命令查询当前网络IP地址，请将查询结果界面截图（要求截图中可以看到具体的命令）,另存为B-2-2.jpg。</li><li>将root用户登录密码更改为iot123456，将设置界面截屏，要求体现更改密码的命令行语句，截图另存为B-2-3.jpg。</li><li>给Ubuntu系统开通root用户SSH权限设置界面截屏，在截图上用红圈圈出关键的设置项，截图另存为B-2-4.jpg。</li><li>利用ssh客户端软件成功登录Ubuntu系统后的界面截图,要求截图体现登录客户端的IP地址，截图另存为B-2-5.jpg。</li></ul><ol><li>用户名newland 密码newland</li><li>查询网络地址：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><ol start="3"><li>更改root用户密码：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo passwd root</span><br></code></pre></td></tr></table></figure><ol start="4"><li>开通root用户ssh权限：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> etc/ssh<br><span class="hljs-built_in">ls</span><br>sudo nano sshd_config<br></code></pre></td></tr></table></figure><p>找到Authentication，将下面的#注释去掉，PermitRootLogin后面改为<code>yes</code>，保存后重启ssh服务：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service ssh restart</span><br></code></pre></td></tr></table></figure><p>再用ssh登录root发现登录成功。</p><p><img src="/img/articles/ubuntu/02%E9%A2%981.jpg"></p><ol><li><img src="/img/articles/ubuntu/02%E9%A2%982.jpg"></li></ol><h2 id="赛题03"><a href="#赛题03" class="headerlink" title="赛题03"></a>赛题03</h2><p><strong>超级简单</strong></p><ul><li>请使用命令查询网络地址配置结果，请将查询结果界面截图（要求截图中可以看到具体的命令）,另存为B-1-2.jpg。</li><li>请将使用命令设置系统拒绝IP为192.168.100.100这台PC机访问的界面截图,另存为B-1-3.jpg。</li><li>请将使用命令在当前目录创建文件夹test的界面截图。另存为B-1-4.jpg。</li></ul><ol><li>查询网络地址【同上】</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><ol start="2"><li>拒绝某ip访问：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -s ip地址 -j DROP<br></code></pre></td></tr></table></figure><ol start="3"><li>创建文件夹：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><h2 id="赛题04"><a href="#赛题04" class="headerlink" title="赛题04"></a>赛题04</h2><ul><li>配置账户锁定策略，用户尝试登录失败5次后锁定用户5分钟，将配置界面截图另存为B-1-2.jpg。要求以上截图中可以看到要求的配置信息。</li><li>配置账户密码最短使用期限为7天，最长使用期限为90天，将配置界面截图另存为B-1-3.jpg。要求以上截图中可以看到要求的配置信息。</li><li>配置用户使用ssh登录系统时应该有“For authorized users only”登录提示。将含有登录提示信息的画面截图，另存为B-1-4.jpg。</li><li>配置系统禁止192.168.100.36这个IP访问本系统，请将配置界面截图，另存为B-1-5.jpg。</li></ul><ol><li>设置账户锁定策略：</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo nano /etc/pam.d/common-auth   # 本地终端 <br>auth required pam_tally2.so <span class="hljs-attribute">deny</span>=5 <span class="hljs-attribute">unlock_time</span>=300  <br><span class="hljs-comment"># 只对本地用户 deny表示登陆失败次数 unlock_time表示锁定300s</span><br>auth required pam_tally2.so <span class="hljs-attribute">deny</span>=3 <span class="hljs-attribute">unlock_time</span>=300 even_deny_root <span class="hljs-attribute">root_unlcok_time</span>=300  # 同时包含root用户<br>sudo nano /etc/pam.d/common-account<br>添加account required pam_tally2.so<br></code></pre></td></tr></table></figure><ol start="2"><li>设置账户密码使用时间：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/etc/</span>login.defs<br></code></pre></td></tr></table></figure><p>找到PASS_MAS_DAYS 、PASS_MIN_DAY并修改，保存退出即可。</p><ol start="3"><li>设置ssh登陆提示信息：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/update-motd.d<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>随意编译其中一个文件（比如00-header）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo nano ~ <br><span class="hljs-comment"># 添加一句：</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;For authorized users only&quot;</span><br><span class="hljs-comment"># 保存退出</span><br></code></pre></td></tr></table></figure><ol start="4"><li>配置禁止某ip访问【同上】：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -s <span class="hljs-number">192.168</span>.<span class="hljs-number">100.36</span> -j DROP<br></code></pre></td></tr></table></figure><h2 id="赛题05"><a href="#赛题05" class="headerlink" title="赛题05"></a>赛题05</h2><p><strong>简单</strong></p><ul><li>请将使用命令创建test文件夹并授予777权限的界面截图，另存为B-2-2.jpg。要求截图中使用红色矩形框圈出创建文件夹的命令和授予777权限的命令。</li><li>请将使用命令查看选手执行命令的历史记录的界面截图，另存为B-2-3.jpg。要求截图中使用红色矩形框圈出具体使用的命令。</li><li>请将使用命令配置允许tcp协议通过eth0网卡的80端口进入服务器的界面截图，另存为B-2-4.jpg。要求截图中使用红色矩形框圈出具体使用的命令。</li></ul><ol><li>授予文件夹权限：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> -R 777 <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><ol start="2"><li>查看命令历史记录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span><br></code></pre></td></tr></table></figure><ol start="3"><li>配置允许tcp协议通过eth0网卡的80端口进入服务器：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo ufw allow <span class="hljs-number">80</span><br>sudo iptables -<span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp -<span class="hljs-selector-tag">i</span> eth0 <span class="hljs-attr">--dport</span> <span class="hljs-number">80</span> -j ACCEPT<br></code></pre></td></tr></table></figure><h2 id="赛题06"><a href="#赛题06" class="headerlink" title="赛题06"></a>赛题06</h2><ul><li>请将使用命令查询本系统已安装包信息的界面截图，另存为B-2-2.jpg。要求截图中使用红色矩形框圈出具体的命令。</li><li>请将使用命令配置允许tcp协议通过eth0网卡的80端口进入服务器的界面截图，另存为B-2-3.jpg。要求截图中使用红色矩形框圈出具体使用的命令。</li><li>请将使用命令查询USB设备详细描述信息的界面截图，另存为B-2-4.jpg。要求截图中使用红色矩形框圈出具体使用的命令。</li></ul><ol><li>查询本系统已安装包信息：</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">apt list <span class="hljs-comment">--installed</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置允许tcp协议通过eth0网卡的80端口进入服务器【同上】：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ufw <span class="hljs-literal">allow</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><ol start="3"><li>查询usb设备详细信息：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lsusb</span><br></code></pre></td></tr></table></figure><h2 id="赛题07"><a href="#赛题07" class="headerlink" title="赛题07"></a>赛题07</h2><ul><li>开通root用户SSH权限设置关键位置设置截图，用红圈圈出，另存为D-2-1.jpg。</li><li>使用SSH工具Xshell，以root用户登录Ubuntu系统界面截图,要求截图体现登录端IP，另存为D-2-2.jpg。</li><li>查询安装软件时下载包的临时存放目录，查询结果截屏要体现查询命令，另存为D-2-3.jpg。</li><li>写出备份当前系统安装的所有包的列表的命令行语句，另存为D-2-4.txt。</li><li>查看 &#x2F;home目录占用空间大小的界面截图，要求截图体现命令行语句，另存为D-2-5.jpg。</li><li>查看当前外网ip地址的界面截图，要求截图体现命令行语句，另存为D-2-6.jpg。</li></ul><ol><li>开通root用户ssh权限【同上】：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/etc/</span>ssh/sshd_config<br></code></pre></td></tr></table></figure><p>修改Authenticaiton下PermitRootLogin项，去掉前面的#注释，后面改为yes，保存退出。</p><ol start="2"><li><p>略。</p></li><li><p>查询安装软件时下载包的临时存放目录：</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls <span class="hljs-regexp">/var/</span>cache<span class="hljs-regexp">/apt/</span>archives<br></code></pre></td></tr></table></figure><ol start="4"><li>备份当前系统安装的所有包的列表：</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">dpkg <span class="hljs-params">--get-selections</span> | grep -v deinstall &gt; ~<span class="hljs-string">/somefile</span><br></code></pre></td></tr></table></figure><ol start="5"><li>查看 &#x2F;home目录占用空间大小：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh /home<br></code></pre></td></tr></table></figure><ol start="6"><li>查看当前外网ip地址：</li></ol><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">curl ifconfig.<span class="hljs-keyword">me</span><br></code></pre></td></tr></table></figure><p>3和4题目来源：<a href="https://zhuanlan.zhihu.com/p/76827666">Ubuntu命令大全</a></p><h2 id="赛题08"><a href="#赛题08" class="headerlink" title="赛题08"></a>赛题08</h2><ul><li>使用root账号，通过SSH客户端软件xShell登录Ubuntu系统，显示&#x2F;root文件夹的界面截图，另存为B-2-1.jpg。</li><li>写出解决重启network遇到问题的命令行语句，另存为B-2-2.txt。</li><li>将设置日期，时间和将时间写入CMOS的命令行语句（一行一句），写入B-2-3.TXT。</li></ul><ol><li><p><img src="/img/articles/ubuntu/B-2-1.jpg" alt="img"></p></li><li><p>参考：</p><p><a href="https://blog.csdn.net/a12355556/article/details/119976937">https://blog.csdn.net/a12355556/article/details/119976937</a></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service network-manager restart</span><br></code></pre></td></tr></table></figure></li><li><p>YYYY-MM-DD等分别为数字填写格式，如2023-09-07</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">sudo <span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;YYYY-MM-DD&quot;</span> <span class="hljs-comment">#设置日期</span><br>sudo <span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;HH:MM:SS&quot;</span>   <span class="hljs-comment">#设置时间</span><br>sudo hwclock <span class="hljs-comment">--systohc    #将时间写入CMOS</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="赛题09"><a href="#赛题09" class="headerlink" title="赛题09"></a>赛题09</h2><ul><li>使用SSH工具Xshell，以root用户登录Ubuntu系统，将登录成功界面截图,要求截图体现登录端IP，另存为B-2-1.jpg。</li><li>请将使用命令查看系统当前登录用户信息，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等，将显示结果的界面截图，另存为B-2-2.jpg。</li><li>请将设置Ubuntu帐号密码的最小长度值在6位以上的界面截图，另存为B-2-3.jpg。</li><li>请将设置Ubuntu帐号远程登录失败三次锁定60秒的界面截图，另存为B-2-4.jpg。</li></ul><ol><li>略。</li><li>查看当前登录用户信息：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">w</span><br></code></pre></td></tr></table></figure><ol start="3"><li>设置密码最小长度值：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo nano <span class="hljs-regexp">/etc/</span>login.defs<br>添加一行PASS_MIN_LEN <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><ol start="4"><li>设置远程登录失败三次锁定60秒【同上 04】：</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> nano /etc/pam.d/sshd                            # ssh远程登录 <br><span class="hljs-attribute">auth</span> required pam_tally2.so <span class="hljs-literal">deny</span>=<span class="hljs-number">3</span> unlock_time=<span class="hljs-number">60</span>   # 失败三次锁定<span class="hljs-number">60</span>秒<br></code></pre></td></tr></table></figure><h2 id="赛题10"><a href="#赛题10" class="headerlink" title="赛题10"></a>赛题10</h2><p><strong>超级超级简单</strong></p><ul><li>请将使用命令查看Ubuntu系统配置IP结果界面截图，另存为B-2-1.jpg。要求截图中可以看到具体的命令、可以看到配置的IP信息。</li><li>请将使用命令在当前目录下创建名为 test的文件夹的界面截图，另存为B-2-2.jpg。</li><li>请将使用命令修改test文件夹权限为755的界面截图，另存为B-2-3.jpg。</li></ul><ol><li>查看ip配置结果：</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在当前目录下创建test文件夹：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><ol start="3"><li>修改test文件夹权限：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 755 <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ubuntu系统维护</tag>
      
      <tag>22年赛题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你使用Hexo+GitHub搭建个人博客并发布文章（附常见问题解决方法）</title>
    <link href="/2023/08/25/hexo+github/"/>
    <url>/2023/08/25/hexo+github/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本教程使用GitHub自带的GitHub pages来生成静态个人博客，而Hexo可以更换各种好看的主题，而且都是免费的，花一点时间就可以打造出自己独有的个人博客。</p><p>Hexo这个有力的工具可以让我们专注于写出一篇博客而不需要关心如何编写html和CSS，再如何形成一个网站，它可以根据markdown文档和指定的主题直接生成一个静态网站，对于新手朋友或者不是专门搞前端开发的人们非常友好。</p><p>还有一个优点就是GitHub pages生成的网站很稳定，就算自己的本地站点被删除，也完全不影响已经发布到GitHub仓库的文章，依旧可以访问查看。</p><p>接下来我们就开始动手搭建吧！</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>在最最开始，肯定要准备一个属于自己的GitHub账号。因篇幅有限，这里就不再赘述如何注册账号了，如果你还没有GitHub账号，可以自行搜索如何注册。不过记得要<strong>使用邮箱</strong>注册。</p><h4 id="1-安装git和node-js"><a href="#1-安装git和node-js" class="headerlink" title="1. 安装git和node.js"></a>1. 安装git和node.js</h4><p>要使用GitHub和Hexo，首先我们需要在本地安装git和node.js，因为Hexo基于node.js，再生成一个ssh密钥用于连接GitHub仓库以及本地文件夹。</p><blockquote><p>git下载链接：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>node.js下载链接：<a href="https://nodejs.org/en/download">https://nodejs.org/en/download</a></p></blockquote><p>安装时可以直接一路点下一步，按默认设置安装即可。如果想搞清楚细节，可以看<a href="https://blog.csdn.net/mukes/article/details/115693833" title=" Git详细安装教程">Git详细安装教程</a>。</p><p>想要验证安装是否成功，可以win+r输入cmd进入终端，输入<code>node -v</code>、<code>npm -v</code>和<code>git --version</code>，如果出现版本号说明安装成功。在文件资源管理器中右键，出现Open Git Bash here和Open Git GUI here。</p><h4 id="2-连接GitHub和本地"><a href="#2-连接GitHub和本地" class="headerlink" title="2. 连接GitHub和本地"></a>2. 连接GitHub和本地</h4><ul><li>在文件资源管理器中右键 - Open Git Bash here，打开git终端，输入以下两条命令，设置用户名和邮箱：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;GitHub用户名&quot;</span>   <br>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;GitHub邮箱&quot;</span><br></code></pre></td></tr></table></figure><ul><li>创建ssh密钥文件：</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;GitHub邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>一路回车即可。</p><p>最后返回密钥结果和图片说明创建完成。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/Jingrong/.ssh/id_rsa):<br>Created directory &#x27;/c/Users/Jingrong/.ssh&#x27;.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /c/Users/Jingrong/.ssh/id_rsa<br>Your public key has been saved in /c/Users/Jingrong/.ssh/id_rsa.pub<br>The key fingerprint is:<br>SHA256:xxxx<br>The key&#x27;s randomart image is:<br>+---[RSA 3072]----+<br>|<span class="hljs-string">                 </span>|<br>|<span class="hljs-string">       .         </span>|<br>|<span class="hljs-string">        + * .. + </span>|<br>|<span class="hljs-string">       . + = .  o</span>|<br>|<span class="hljs-string">      . S   . . .</span>|<br>|<span class="hljs-string">     . .     . . </span>|<br>|<span class="hljs-string">  .   = .  ...o  </span>|<br>|<span class="hljs-string">   +.= o +.++o   </span>|<br>|<span class="hljs-string">                 </span>|<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><ul><li><p>找到路径<code>Your public key has been saved in /c/Users/Jingrong/.ssh/id_rsa.pub</code>，用记事本打开。ctrl+a将所有内容复制到剪切板。</p><p>登录GitHub，点击右上角自己的头像 - setting，找到SSH and GPG keys，点击add SSH key：</p><p><img src="/img/articles/hexo+github/1.jpg"></p><p>将剪贴板中复制的密钥粘贴过来：</p><p><img src="/img/articles/hexo+github/2.jpg"></p></li><li><p>检测是否连接成功：</p></li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>ssh git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>  如果出现Hi xxx! You’ve successfully authenticated…的提示，就说明连接成功。</p><h4 id="3-安装Hexo以及Fluid主题"><a href="#3-安装Hexo以及Fluid主题" class="headerlink" title="3.安装Hexo以及Fluid主题"></a>3.安装Hexo以及Fluid主题</h4><h6 id="使用-npm-安装-Hexo："><a href="#使用-npm-安装-Hexo：" class="headerlink" title="使用 npm 安装 Hexo："></a>使用 npm 安装 Hexo：</h6><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>输入<code>hexo -v</code>即可查看是否安装成功。</p><p>新建一个hexo站点根目录，在站点右键 - Open Git Bash here，执行以下命令：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo init<br><span class="hljs-variable">$ </span>npm install<br></code></pre></td></tr></table></figure><p>执行完成之后，指定文件夹的目录如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xl">.<br>├── _<span class="hljs-function"><span class="hljs-title">config</span>.yml     ---&gt;</span>  网站配置信息<br>├── <span class="hljs-function"><span class="hljs-title">package</span>.json    ---&gt;</span>  应用程序的信息<br>├── <span class="hljs-function"><span class="hljs-title">scaffolds</span>       ---&gt;</span>  模板文件夹<br>├── <span class="hljs-function"><span class="hljs-title">source</span>          ---&gt;</span>  放置资源文件。<br>|   ├── _drafts<br>|   └── _<span class="hljs-function"><span class="hljs-title">posts</span>      ---&gt;</span>  .md文件<br>└── themes<br></code></pre></td></tr></table></figure><blockquote><p>除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。来自<a href="https://hexo.io/zh-cn/docs/setup" title="hexo官方文档">Hexo官方文档</a></p></blockquote><p>完成后再执行以下命令：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g<br><span class="hljs-variable">$ </span>hexo s<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:4000</code>，即可浏览生成的hexo页面。</p><p>接下来就可以在<a href="https://hexo.io/themes/%E9%87%8C%E5%BC%80%E5%A7%8B%E6%8C%91%E9%80%89%E4%B8%80%E4%B8%AA%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%BB%E9%A2%98%E5%95%A6%EF%BC%81">https://hexo.io/themes/里开始挑选一个喜欢的主题啦！</a></p><p>以fluid主题为例，先找到fluid官方文档和GitHub仓库。</p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a>内容复制过去。</p><h6 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h6><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h6 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h6><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><h6 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h6><p>关于主题配置的详细步骤可以查看fluid的<a href="https://hexo.fluid-dev.com/docs/guide/" title="fluid主题配置指南">主题使用文档</a>。</p><h2 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><p>使用hexo的好处就在于不需要自己手写html，而只需要写md文档。</p><p>在<code>resource/_post</code>文件夹中新建md文档。</p><p>md文档的开头需要添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">标签1</span>,<span class="hljs-string">标签2</span>]<br><span class="hljs-attr">categories:</span> [<span class="hljs-string">分类</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">主页封面图的相对路径</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-8</span><span class="hljs-number">-25</span> <span class="hljs-number">18</span><span class="hljs-string">:03:07</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>写好之后输入命令</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo g   <span class="hljs-comment">#将md编译成html保存到public文件夹中</span><br><span class="hljs-variable">$ </span>hexo s   <span class="hljs-comment">#开启本地服务器查看网站</span><br></code></pre></td></tr></table></figure><p>即可看到自己新添加的文章。</p><h2 id="发布到GitHub-Pages"><a href="#发布到GitHub-Pages" class="headerlink" title="发布到GitHub Pages"></a>发布到GitHub Pages</h2><h6 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h6><p>点击右上角加号，选择new repository。</p><p><img src="/img/articles/hexo+github/5.png"></p><p>仓库名称按照<code>用户名.github.io</code>的格式填写。选择public，勾选add a README file。</p><p><img src="/img/articles/hexo+github/6.png"></p><p>最后点击创建仓库即可。</p><h6 id="配置-config-yml文档"><a href="#配置-config-yml文档" class="headerlink" title="配置_config.yml文档"></a>配置_config.yml文档</h6><p>打开hexo站点的根目录，找到_config.yml文件，使用记事本打开。文档的最后将</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span><br>deploy: <br>  type: <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="hljs-symbol">deploy:</span> <br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:用户名/用户名.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>保存。</p><p>到这里就可以进入git终端，输入命令<code>hexo d</code>将public文件夹提交到仓库中。不一会就能看见仓库中出现了一个新的master分支，里面有上传的public文件夹的内容。</p><h6 id="生成GitHub-Pages"><a href="#生成GitHub-Pages" class="headerlink" title="生成GitHub Pages"></a>生成GitHub Pages</h6><p>进入刚刚生成的仓库。</p><p><img src="/img/articles/hexo+github/7.png"></p><p>source选择<code>Deploye from a branch</code>，Branch选择<code>master</code>分支，选择好之后点<code>save</code>保存设置。稍等一分钟，就可以看到”Your site is alive at xxxx”的提示，点击<code>visit</code>就可以在自己的网站上看到刚刚配置好的博客了。</p><p><img src="/img/articles/hexo+github/8.png"></p><p>附：</p><p>hexo常用命令如下：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs axapta">npm install hexo -g <span class="hljs-meta">#安装Hexo</span><br>npm update hexo -g <span class="hljs-meta">#升级</span><br>hexo init <span class="hljs-meta">#初始化博客</span><br><br>hexo n <span class="hljs-string">&quot;我的博客&quot;</span> == hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;我的博客&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo g == hexo generate <span class="hljs-meta">#生成</span><br>hexo s == hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#启动服务预览</span><br>hexo d == hexo deploy <span class="hljs-meta">#部署</span><br><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#Hexo会监视文件变动并自动更新，无须重启服务器</span><br>hexo <span class="hljs-keyword">server</span> -s <span class="hljs-meta">#静态模式</span><br>hexo <span class="hljs-keyword">server</span> -p <span class="hljs-number">5000</span> <span class="hljs-meta">#更改端口</span><br>hexo <span class="hljs-keyword">server</span> -i <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> <span class="hljs-meta">#自定义 IP</span><br>hexo clean <span class="hljs-meta">#清除缓存，若是网页正常情况下可以忽略这条命令</span><br></code></pre></td></tr></table></figure><h2 id="更改域名"><a href="#更改域名" class="headerlink" title="更改域名"></a>更改域名</h2><p>我的域名是在<a href="https://www.namesilo.com/" title="NameSilo">namesilo</a>上购买的，非常便宜（xyz后缀的一年17r）。</p><p>在主页搜索自己想要的域名，添加到购物车。</p><p><img src="/img/articles/hexo+github/9.png"></p><p>点击checkout跳转到结算界面。可以选择添加1美元的优惠码。我买的时候不知道为什么没有用，这里就不再介绍。确认之后点checkout，之后选择支付宝扫码付款即可。</p><p><img src="/img/articles/hexo+github/10.png"></p><p>这里着重介绍购买之后如何进行域名的更改。</p><p>这里是My Account界面，点击manage进入域名管理页。</p><p><img src="/img/articles/hexo+github/11.png"></p><p>找到刚刚购买的域名，点击蓝色地球图标。</p><p><img src="/img/articles/hexo+github/12.png"></p><p>首先将默认的所有配置删除，再点击<code>CNAME</code>添加一条配置。TTL默认改为3600即可。</p><p><img src="/img/articles/hexo+github/13.png"></p><p>回到GitHub，将购买的域名也添加到GitHub Pages的设置上。</p><p><img src="/img/articles/hexo+github/14.png"></p><p>等待3-4个小时，就可以在全球使用这个域名访问你的GitHub Pages博客啦！</p><h2 id="常见问题解决方法"><a href="#常见问题解决方法" class="headerlink" title="常见问题解决方法"></a>常见问题解决方法</h2><h5 id="重装系统之后，原本的环境都无法找回"><a href="#重装系统之后，原本的环境都无法找回" class="headerlink" title="重装系统之后，原本的环境都无法找回"></a>重装系统之后，原本的环境都无法找回</h5><p>复制好原本的文章，重新完成markdown格式的文档。重新安装git和node.js，生成ssh密钥，建立连接后重新建立hexo站点并上传到原来仓库。原本仓库的master分支里内容可以删除掉，防止新旧主题冲突。</p><h5 id="hexo-d时报错"><a href="#hexo-d时报错" class="headerlink" title="hexo d时报错"></a>hexo d时报错</h5><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit">ssh: Could not resolve hostname github.com: Name or service not known<br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/d<br>ocs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (E:\MyBlog\node_modules\hexo-util\lib\spawn.js:5<br>1:21)<br>    at ChildProcess.emit (node:events:514:28)<br>    at cp.emit (E:\MyBlog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:291:12)<br></code></pre></td></tr></table></figure><p>报以上错误，一般是网络连接出现问题了，无法上传到github对应仓库，可以尝试检查网络设置，或者查看是否是域名绑定不对出现的问题。</p><h5 id="图片无法显示"><a href="#图片无法显示" class="headerlink" title="图片无法显示"></a>图片无法显示</h5><p>在写本文的过程中，我想插入一些图片，但是发现图片只能在typora上显示，hexo g后无法在网页上显示，遂去查看各种教程，发现大部分都是让下载一个插件，然而还是不成功，据说是因为hexo版本更新了但是插件还没有更新。</p><p>那么我只能开始自己找解决办法。</p><p>首先在<code>hexo clean</code>、<code>hexo g</code>之后找到public文件夹，找到md文档生成的html文件，查看显示图片的那一行源代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/1.jpg&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;/img/loading.gif&quot;</span> <span class="hljs-attr">lazyload</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/2.jpg&quot;</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;/img/loading.gif&quot;</span> <span class="hljs-attr">lazyload</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而typora中我此时已经改成仅包含文件名，不包含路径。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[]</span>(<span class="hljs-number">1</span>.jpg)<br>!<span class="hljs-selector-attr">[]</span>(<span class="hljs-number">2</span>.jpg)<br></code></pre></td></tr></table></figure><p>于是我尝试把<code>public/img</code>中的图片路径补充完整。怎么补充呢？首先要找到html的位置以及图片的位置。public文件夹就是由md文档生成的。查找一番后发现<code>img</code>中才存在图片。</p><p>由此继续发现开启<code>post_asset_folder</code>之后，只是在<code>hexo n xxx</code>新文章的时候同时创建一个同名的文件夹，图片放文件夹里，但是<code>hexo g</code>的时候这个同名文件夹里的图片并不会在public的html文件夹中生成相同图片，依旧只有<code>public/img</code>中有图片：</p><p><img src="/img/articles/hexo+github/3.png"></p><p>那么我们可以知道public和resource文件夹下的对应关系。</p><p><img src="/img/articles/hexo+github/4.png"></p><p>搞清楚之后，我们的思路就是：html中图片路径一定是相对路径而不能写绝对路径，因为最终发布到GitHub上去的只有public文件夹的内容，这个相对路径一定是基于public文件夹内的路径。</p><p>因此我重新把文章配图复制到img下，新建一个本文的文件夹存放配图。以我的路径示例，在typora中补充完整图片路径：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">![](<span class="hljs-regexp">/img/</span>articles<span class="hljs-regexp">/hexo+github/</span><span class="hljs-number">1</span>.jpg)<br>![](<span class="hljs-regexp">/img/</span>articles<span class="hljs-regexp">/hexo+github/</span><span class="hljs-number">2</span>.jpg)<br></code></pre></td></tr></table></figure><p>再次<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>之后查看，果然图片出现了。发布到GitHub Pages同样没有问题。问题解决。</p><p>使用此解决方法，需要注意：</p><ul><li>每次发布文章，图片需要放在<code>/resource/img</code>下，这样才能保证每次<code>hexo g</code>都能自动同步到public文件夹中。</li><li>typora中写相对路径。</li><li>typora中无法解析图片显示出来，但是在网页上可以显示出来。</li></ul><p>我的方法仅提供一个思路，每个人具体的问题可能有些不同，也不能盲从，还是需要结合实际来解决。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓笔记</title>
    <link href="/2023/07/28/android/"/>
    <url>/2023/07/28/android/</url>
    
    <content type="html"><![CDATA[<h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><ol><li>（每台新电脑需要设置的）setting –&gt; basic</li><li>project</li><li>import jar 并 添加依赖性  （右键-&gt; add as library）</li><li>AndroidManifest.xml -&gt; add Internet Power,添加任务启动模式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;uses-permission android:name=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span> /&gt;<br><br><br>&lt;!--application/acitvity中添加:--&gt;<br>android:launchMode=<span class="hljs-string">&quot;singleTask&quot;</span><br></code></pre></td></tr></table></figure><h1 id="ZigBee连接、获取数据与控制"><a href="#ZigBee连接、获取数据与控制" class="headerlink" title="ZigBee连接、获取数据与控制"></a>ZigBee连接、获取数据与控制</h1><h5 id="1-新建ZigBee类【全局变量】"><a href="#1-新建ZigBee类【全局变量】" class="headerlink" title="1.新建ZigBee类【全局变量】"></a>1.新建ZigBee类【全局变量】</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ZigBee zigbee;<br></code></pre></td></tr></table></figure><h5 id="2-建立zigbee连接【onStart-】"><a href="#2-建立zigbee连接【onStart-】" class="headerlink" title="2.建立zigbee连接【onStart()】"></a>2.建立zigbee连接【onStart()】</h5><p>（tcp模式从串口服务器获取）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">zigbee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZigBee</span>(DataBusFactory.newSocketDataBus(<span class="hljs-string">&quot;192.168.1.200&quot;</span>, <span class="hljs-number">6004</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectResultListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onConnectResult</span><span class="hljs-params">(<span class="hljs-type">boolean</span> b)</span> &#123;<br>        <span class="hljs-keyword">if</span>(b) &#123;<br>            <span class="hljs-comment">//连接成功</span><br>            Log.d(<span class="hljs-string">&quot;TAG&quot;</span>,<span class="hljs-string">&quot;zigbee连接成功&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//newSocketDataBus(串口服务器ip地址,端口号)</span><br></code></pre></td></tr></table></figure><h5 id="5-断开连接【onpause-】"><a href="#5-断开连接【onpause-】" class="headerlink" title="5.断开连接【onpause()】"></a>5.断开连接【onpause()】</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">zigbee.stopConnect();<br></code></pre></td></tr></table></figure><h5 id="4-控制双联继电器"><a href="#4-控制双联继电器" class="headerlink" title="4.控制双联继电器"></a>4.控制双联继电器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">zigbee.ctrlDoubleRelay(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//第一个参数：序列号，第二个：双联的第几联，第三个：设置状态（打开或关闭），第四个：控制事件</span><br><span class="hljs-comment">//需要抛出异常</span><br></code></pre></td></tr></table></figure><h5 id="5-获取温湿度"><a href="#5-获取温湿度" class="headerlink" title="5.获取温湿度"></a>5.获取温湿度</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span>[]  values = zigbee.getTmpHum();<br><span class="hljs-type">double</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> values[<span class="hljs-number">0</span>];<br><span class="hljs-type">double</span> <span class="hljs-variable">hum</span> <span class="hljs-operator">=</span> values[<span class="hljs-number">1</span>];<br><span class="hljs-comment">//数组里第一个是温度，第二个是湿度。</span><br><span class="hljs-comment">//需要抛出异常</span><br></code></pre></td></tr></table></figure><h5 id="6-获取四模拟量输入"><a href="#6-获取四模拟量输入" class="headerlink" title="6.获取四模拟量输入"></a>6.获取四模拟量输入</h5><p>使用FourChannelValConvert类的静态方法来转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">double</span>[] values = zigbee.getFourEnter();<br>    <span class="hljs-comment">//方法需要抛出异常</span><br>    <br>    <span class="hljs-comment">//数组的数据是按实际连接顺序获取的。</span><br>    temp = BigDecimal.valueOf(FourChannelValConvert.getTemperature(values[<span class="hljs-number">0</span>])).setScale(<span class="hljs-number">2</span>,BigDecimal.ROUND_HALF_UP).doubleValue();<br>    hum = BigDecimal.valueOf(FourChannelValConvert.getHumidity(values[<span class="hljs-number">1</span>])).setScale(<span class="hljs-number">2</span>,BigDecimal.ROUND_HALF_UP).doubleValue();<br>    co2 = BigDecimal.valueOf(FourChannelValConvert.getCO2(values[<span class="hljs-number">2</span>])).setScale(<span class="hljs-number">2</span>,BigDecimal.ROUND_HALF_UP).doubleValue();<br>    noise = BigDecimal.valueOf(FourChannelValConvert.getNoice(values[<span class="hljs-number">3</span>])).setScale(<span class="hljs-number">2</span>,BigDecimal.ROUND_HALF_UP).doubleValue();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Modbus连接、获取数据与控制"><a href="#Modbus连接、获取数据与控制" class="headerlink" title="Modbus连接、获取数据与控制"></a>Modbus连接、获取数据与控制</h1><h5 id="1-新建Modbus-4150类"><a href="#1-新建Modbus-4150类" class="headerlink" title="1.新建Modbus 4150类"></a>1.新建Modbus 4150类</h5><p>通过串口服务器连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">modbus4150 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Modbus4150</span>(DataBusFactory.newSocketDataBus(<span class="hljs-string">&quot;192.168.1.200&quot;</span>,<span class="hljs-number">6004</span>),<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h5 id="2-获取modbus控制器和传感器"><a href="#2-获取modbus控制器和传感器" class="headerlink" title="2.获取modbus控制器和传感器"></a>2.获取modbus控制器和传感器</h5><p>控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">modbus4150.ctrlRelay(<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>);<br>modbus4150.ctrlRelay(<span class="hljs-number">2</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//参数：第一个：表示DO口，第二个：表示打开或关闭，第三个：表示成功后是否需要设置其他逻辑或动作（一般为空即可）</span><br><span class="hljs-comment">//方法需要抛出异常</span><br></code></pre></td></tr></table></figure><blockquote><p>电动推杆：在控制进的时候，要把退那一联设置为false。同理，控制退的时候，要把进那一联设置为false。停止的时候都设置为false</p></blockquote><p>传感器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">modbus4150.getDIVal(<span class="hljs-number">5</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MdBus4150SensorListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onVal</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-comment">//返回值0或1</span><br>        value = i;<br>        Log.d(<span class="hljs-string">&quot;test&quot;</span>,i+<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFail</span><span class="hljs-params">(Exception e)</span> &#123;<br><br><br>    &#125;<br>&#125;);<br><span class="hljs-comment">//传入参数：第一个：表示DI口，第二个：传感器监听器</span><br><span class="hljs-comment">//方法需要抛出异常</span><br></code></pre></td></tr></table></figure><h1 id="LED小条屏"><a href="#LED小条屏" class="headerlink" title="LED小条屏"></a>LED小条屏</h1><h5 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1.创建对象"></a>1.创建对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LedScreen</span> <span class="hljs-variable">ledScreen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LedScreen</span>(DataBusFactory.newSocketDataBus(<span class="hljs-string">&quot;192.168.1.200&quot;</span>,<span class="hljs-number">6005</span>),<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h5 id="2-设置文本"><a href="#2-设置文本" class="headerlink" title="2.设置文本"></a>2.设置文本</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ledScreen.sendTxt(<span class="hljs-string">&quot;hello&quot;</span>, PlayType.LEFT, ShowSpeed.SPEED1,<span class="hljs-number">2</span>,<span class="hljs-number">100</span>,<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><blockquote><p>参数说明：</p><p>txt：表示要发送的文件，</p><p>PlayType.LEFT：表示向左移。支持上下左右等，对应枚举为UP,DOWN,RIGHT；</p><p>ShowSpeed.SPEED3：表示速度3级播放，支持从1级到8级，对应枚举类为ShowSpeed1到8</p><p>StopTime 停留时间： 3：表示停止3秒</p><p>validTime 有效时间： 100：表示永不过时，小于99表示有效时间，大于99表示永久有效。</p></blockquote><h1 id="RFID"><a href="#RFID" class="headerlink" title="RFID"></a>RFID</h1><h5 id="1-创建对象并连接串口服务器"><a href="#1-创建对象并连接串口服务器" class="headerlink" title="1.创建对象并连接串口服务器"></a>1.创建对象并连接串口服务器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RFID</span> <span class="hljs-variable">rfid</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RFID</span>(DataBusFactory.newSocketDataBus(<span class="hljs-string">&quot;172.18.1.15&quot;</span>,<span class="hljs-number">6006</span>),<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><h5 id="2-获取RFID卡号※"><a href="#2-获取RFID卡号※" class="headerlink" title="2.获取RFID卡号※"></a>2.获取RFID卡号※</h5><blockquote><p>在线程里使用这个方法的时候： 如果没有读到数据，onVal()方法一直不会结束，因此需要判断是否读到数据，如果读到数据再进行下一次读取的方法。 不是在线程里使用：不需要判断。</p><p>用control来控制onVal()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义control的时候设置control默认为true</span><br><br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span>(control) &#123;<br>            control = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">//每循环一次，先把control设置为false，停止循环</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                rfid.readSingleEpc(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SingleEpcListener</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onVal</span><span class="hljs-params">(String s)</span> &#123;<br>                        <span class="hljs-comment">//返回获取到的id，String类型</span><br>                        Log.d(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;onVal():&quot;</span>+s);<br>                        rfid_id = s;<br>                        <span class="hljs-keyword">if</span>(rfid_id != <span class="hljs-literal">null</span>) &#123;<br>                            control = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-comment">//直到获取到的id不为空，就继续下一次循环</span><br>                        &#125;<br>                    &#125;<br><br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFail</span><span class="hljs-params">(Exception e)</span> &#123;<br><br><br>                    &#125;<br>                 &#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="TextToSpeech语音播报安装与使用"><a href="#TextToSpeech语音播报安装与使用" class="headerlink" title="TextToSpeech语音播报安装与使用"></a>TextToSpeech语音播报安装与使用</h1><p>在平板上安装： 连接数据线，把 讯飞中文引擎支持.apk 移动到平板内部存储指定文件目录下 （演示时安装在DCIM文件夹中）</p><h5 id="1-创建对象-1"><a href="#1-创建对象-1" class="headerlink" title="1.创建对象"></a>1.创建对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">TextToSpeech textToSpeech;<br>textToSpeech = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextToSpeech</span>(<span class="hljs-built_in">this</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//第一个参数context上下文</span><br></code></pre></td></tr></table></figure><h5 id="2-发送语音"><a href="#2-发送语音" class="headerlink" title="2.发送语音"></a>2.发送语音</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">textToSpeech.speak(<span class="hljs-string">&quot;你好&quot;</span>,TextToSpeech.QUEUE_FLUSH,<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//第一个参数：文本</span><br><span class="hljs-comment">/**第二个参数：可选两种模式</span><br><span class="hljs-comment">* QUEUE_ADD</span><br><span class="hljs-comment">* Queue mode where the new entry is added at the end of the playback queue.</span><br><span class="hljs-comment">* 队列模式，其中新条目添加到播放队列的末尾。</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* QUEUE_FLUSH</span><br><span class="hljs-comment">* Queue mode where all entries in the playback queue (media to be played and text to be synthesized) are dropped and replaced by the new entry.</span><br><span class="hljs-comment">* 队列模式，其中播放队列中的所有条目（要播放的媒体和要合成的文本）都将被删除并替换为新条目。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h1><h5 id="1-创建TextureView控件"><a href="#1-创建TextureView控件" class="headerlink" title="1.创建TextureView控件"></a>1.创建TextureView控件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;TextureView<br>    android:id=<span class="hljs-string">&quot;@+id/textureview&quot;</span><br>    android:layout_width=<span class="hljs-string">&quot;800dp&quot;</span><br>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span><br>    /&gt;<br></code></pre></td></tr></table></figure><h5 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TextureView</span> <span class="hljs-variable">textureView</span> <span class="hljs-operator">=</span> findViewById(R.id.textureview);<br><span class="hljs-type">CameraManager</span> <span class="hljs-variable">cameraManager</span> <span class="hljs-operator">=</span> CameraManager.getInstance();<br>cameraManager.setupInfo(textureView, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;172.16.1.13&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-comment">//参数：第一个textureview控件，第二个用户名，第三个密码，第四个ip地址，第五个通道号(一般为1)</span><br></code></pre></td></tr></table></figure><h5 id="3-释放【onpPuase-】"><a href="#3-释放【onpPuase-】" class="headerlink" title="3.释放【onpPuase()】"></a>3.释放【onpPuase()】</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cameraManager.releaseCamera();<br></code></pre></td></tr></table></figure><h5 id="4-左右移动"><a href="#4-左右移动" class="headerlink" title="4.左右移动"></a>4.左右移动</h5><p>使用<code>controlDir(PTZ)</code>方法。参数枚举有：<code>PTZ.Up, PTZ.Down, PTZ.Left, PTZ.Right, PTZ.Stop</code> </p><p>长按按钮实现上调：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">btn_up.setOnTouchListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnTouchListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouch</span><span class="hljs-params">(View view, MotionEvent motionEvent)</span> &#123;<br>        <span class="hljs-keyword">if</span>(motionEvent.getAction() == MotionEvent.ACTION_DOWN)&#123;<br>            cameraManager.controlDir(PTZ.Up);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(motionEvent.getAction() == motionEvent.ACTION_UP) &#123;<br>            cameraManager.controlDir(PTZ.Stop);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="5-截图"><a href="#5-截图" class="headerlink" title="5.截图"></a>5.截图</h5><p>使用<code>cameraManager.capture(String path,Stirng fileName)</code>方法，第一个是平板本地的存储路径，第二个参数是保存的文件名，可以用当前时间命名。</p><p>按下截图按钮，保存图片到指定路径，并将文件名添加到数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">btn_capture.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> NowTime.NowTime() + <span class="hljs-string">&quot;.jpg&quot;</span>;<br>        cameraManager.capture(<span class="hljs-string">&quot;/storage/emulated/0/DCIM&quot;</span>, name);<br>        <span class="hljs-comment">//路径末尾 读加/，写不加/</span><br>        sqlmain.add(name);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><h2 id="⭐活动生命周期-多个页面切换的资源释放"><a href="#⭐活动生命周期-多个页面切换的资源释放" class="headerlink" title="⭐活动生命周期+多个页面切换的资源释放"></a>⭐活动生命周期+多个页面切换的资源释放</h2><p>一般每个app都有多个Activity视图，且每个Activity中有多个子线程，如果不进行资源释放，会导致每打开一个Activity都新增一个子线程，而旧的子线程又不能销毁，最后会使程序出错。</p><h3 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h3><p>![1 生命活动周期与多个页面切换时的资源释放](主线-物联网竞赛\7.31\1 生命活动周期与多个页面切换时的资源释放.png)</p><p><strong>主活动</strong>只需写3个方法：</p><ul><li>onCreate()  在此进行初始化，比如获取绑定资源文件等。这个方法只会执行一次，从其他活动跳转至主活动的时候不会再次调用。</li><li>onStart()  在此进行连接网络，连接资源等，开启线程任务。跳转回主界面的时候会调用，因此每次跳转回来都会重新连接资源</li><li>onPause()  在此释放资源，关闭线程任务。主界面跳转至其他界面的时候调用。</li><li>（子线程）</li></ul><p><strong>其他活动</strong>需要写4个方法：</p><ul><li>onCreate()  </li><li>onStart() 先连接资源 再开启线程任务</li><li>onPause() 先关闭线程任务 再释放资源</li><li>onStop()  finish()</li><li>子线程</li></ul><h3 id="2-固定框架"><a href="#2-固定框架" class="headerlink" title="2.固定框架"></a>2.固定框架</h3><ol><li>将主活动设置为单任务模式：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">android:launchMode=<span class="hljs-string">&quot;singleTask&quot;</span><br></code></pre></td></tr></table></figure><ol><li>MainActivity：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">control</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br>    thread.start();<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onStart();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接资源</span><br><span class="hljs-comment">     * 开启多线程任务</span><br><span class="hljs-comment">     */</span><br>    control = <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onPause();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭多线程任务</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    control = <span class="hljs-literal">false</span>;<br><br><br>&#125;<br><br><br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>           <span class="hljs-keyword">if</span> (control) &#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   thread.sleep(<span class="hljs-number">1000</span>);<br>                   <span class="hljs-comment">/**</span><br><span class="hljs-comment">                    * 逻辑策略</span><br><span class="hljs-comment">                    */</span><br>               &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li>其他Activity：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">control</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main2);<br>    thread.start();<br>&#125;<br><br><br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(control)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                    <span class="hljs-comment">/**</span><br><span class="hljs-comment">                     * 逻辑策略</span><br><span class="hljs-comment">                     */</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onStart();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接资源</span><br><span class="hljs-comment">     * 开启多线程</span><br><span class="hljs-comment">     */</span><br>    control = <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onPause();<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭多线程</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    control = <span class="hljs-literal">false</span>;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onStop();<br>    finish();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-实际流程"><a href="#3-实际流程" class="headerlink" title="3.实际流程"></a>3.实际流程</h3><p><img src="/2023/07/28/android/Users\88440\Desktop\主线-物联网竞赛\note_images\MainActivity与其他Activity之间切换.png" alt="img"></p><p><img src="/2023/07/28/android/Users\88440\Desktop\主线-物联网竞赛\note_images\在后台销毁应用.png" alt="img"></p><hr><h2 id="⭐SQLite-CRUD-listview使用"><a href="#⭐SQLite-CRUD-listview使用" class="headerlink" title="⭐SQLite CRUD+listview使用"></a>⭐SQLite CRUD+listview使用</h2><h3 id="1-SQLite"><a href="#1-SQLite" class="headerlink" title="1.SQLite"></a>1.SQLite</h3><h4 id="1-sqlite初始化"><a href="#1-sqlite初始化" class="headerlink" title="1.sqlite初始化"></a>1.sqlite初始化</h4><p>新建sql类，继承自SQLiteOpenHelper（这是一个抽象类，需要被继承之后才能被使用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SQL</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br><br><br>    <span class="hljs-comment">//使用只传入一个Context参数的构造方法即可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SQL</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Context context)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 创建数据库</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-built_in">super</span>(context, <span class="hljs-string">&quot;sql.db&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//创建一个名为sql.db的数据库，游标工厂为null，版本号为1</span><br>    &#125;<br><br><br>    <span class="hljs-comment">//onCreate()方法 第一次创建数据库的时候会自动调用。如果检测到已经存在数据库，则不会调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase db)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 创建一张表，包含id，时间，温度数据</span><br><span class="hljs-comment">         */</span><br>        db.execSQL(<span class="hljs-string">&quot;create table data(id int primary key autoincrement, time text, temperature text)&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//onUpgrade()方法 数据库版本更新的时候会自动调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUpgrade</span><span class="hljs-params">(SQLiteDatabase db, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>构建出SQLiteOpenHelper的继承类的实例之后，调用两个重要的方法getReadableDatabase()和getWritableDatabase()就能够创建数据库了。</p><p>创建的数据库目录：<code>/data/data/&lt;程序包名&gt;/databases/</code></p><h4 id="2-ContentValues"><a href="#2-ContentValues" class="headerlink" title="2.ContentValues"></a>2.ContentValues</h4><p>数据库的一行记录用ContentValues存放，类似于Map。提供put()和getAsXxx()方法存入和取出数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">put(String key, Xxx values)<br><span class="hljs-comment">//key为数据列的列名</span><br><br><br>getAsXxx(String key)<br></code></pre></td></tr></table></figure><h4 id="3-Cursor游标"><a href="#3-Cursor游标" class="headerlink" title="3.Cursor游标"></a>3.Cursor游标</h4><p>查询时，使用cursor游标进行查询。query()方法返回的也是一个Cursor对象。</p><p>游标对象会指向查询结果集第一行的前面，所以要通过Cursor对象的moveToFirst()方法指向第一条记录，通过moveToNext()方法指向下一条记录，如果没有记录了，moveToNext()返回值为空，所以通常取数据时，都用循环来控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(cursor.moveToNext())&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="4-CRUD-增删改查操作类"><a href="#4-CRUD-增删改查操作类" class="headerlink" title="4.CRUD 增删改查操作类"></a>4.CRUD 增删改查操作类</h4><h6 id="新建一个数据库操作类"><a href="#新建一个数据库操作类" class="headerlink" title="新建一个数据库操作类"></a>新建一个数据库操作类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SQLexec</span>&#123;<br>    SQL sql;<br>    SQLiteDatabase db;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="新建构造方法"><a href="#新建构造方法" class="headerlink" title="新建构造方法"></a>新建构造方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SQLexec</span><span class="hljs-params">(Context context)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sql = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>(context);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Create-创建"><a href="#Create-创建" class="headerlink" title="Create 创建"></a>Create 创建</h6><p>insert()方法可以添加数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String table, String nullColumnHack, ContentValues values)</span> <br><span class="hljs-comment">//参数：table需要插入数据的表名，nullColumnHack可以插入null值的数据列的列名，values一行记录的数据</span><br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String time)</span>&#123;<br>    <span class="hljs-comment">//获取数据库对象</span><br>    db = sql.getReadableDatabase();<br><br><br>    <span class="hljs-comment">//使用ContentValues对象来添加数据</span><br>    <span class="hljs-type">ContentValues</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>    values.put(<span class="hljs-string">&quot;time&quot;</span>,time);<br>    db.insert(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-literal">null</span>,values);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Retrieve-检索、查询"><a href="#Retrieve-检索、查询" class="headerlink" title="Retrieve 检索、查询"></a>Retrieve 检索、查询</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy)</span><br><span class="hljs-comment">//参数：第一个表名，第二个要查询出来的列名，第三个查询条件的子句，第四个用于为selection子句中占位符传入参数值，第五个groupBy用于控制分组，第六个having用于对分组进行过滤，第七个orderBy用于对记录进行排序</span><br><span class="hljs-comment">//查询结束后返回一个Curosr游标对象，查询到的数据通过游标对象取出来。</span><br></code></pre></td></tr></table></figure><p><strong>参数详解：</strong></p><p><strong>table</strong>：表名。相当于<code>select *** from table</code>语句中的table。如果是多表联合查询，可以用逗号将两个表名分开。 </p><p><strong>columns</strong>：要查询出来的列名。相当于<code>select *** from table</code>语句中的 ***部分。如果是查询多个参数，可以用字符串数组列举。例：<code>new String[]&#123;&quot;name&quot;,&quot;age&quot;,&quot;sex&quot;&#125;</code> </p><p><strong>selection</strong>：查询条件子句，相当于<code>select *** from table where &amp;&amp;</code>语句中的<code>&amp;&amp;</code>部分，在条件子句允许使用占位符“?”表示条件值 ，例：<code>&quot;name=?,age=?,sex=?&quot;</code></p><p><strong>selectionArgs</strong>：对应于selection参数占位符的值，值在数组中的位置与占位符在语句中的位置必须一致，否则就会有异常。 例：与<code>new String[]&#123;&quot;lisa&quot;,&quot;1&quot;,&quot;女&quot;&#125;</code></p><p><strong>groupBy</strong>：相当于<code>select *** from table where &amp;&amp; group by ...</code>语句中…的部分 ，作用是：将同一列的相同名字的参数合并在一起。例：在name列有两个Jame（name:Jame –salay:100，name:Jame –salay:200）,使用…group by name查询后 只显示一个Jame的集合（name:Jame–salay:300）</p><p><strong>having</strong>：相当于<code>select *** from table where &amp;&amp; group by ...having %%%</code>语句中%%%的部分， 作用于groupBy的条件，例：havig name&gt;2意思是name列相同参数&gt;2</p><p><strong>orderBy</strong>：相当于<code>select *** from ?? where &amp;&amp; group by ... having %%% order by@@</code>语句中的@@部分，如：personid desc（按person 降序）, age asc（按age升序）</p><p><strong>limit</strong>：指定偏移量和获取的记录数，相当于select语句limit关键字后面的部分。</p><p>查询所有数据：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs processing">@<span class="hljs-title function_">SuppressLint</span>(<span class="hljs-string">&quot;Range&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">ArrayList</span>&lt;Map&gt; <span class="hljs-title function_">query</span>( ) &#123;<br>    db = sql.<span class="hljs-property">getReadableDatabase</span>();<br>    <span class="hljs-comment">//cursor查询的是所有数据，不加任何条件</span><br>    Cursor <span class="hljs-built_in">cursor</span> = db.<span class="hljs-property">query</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">ArrayList</span>&lt;Map&gt; arrayList = <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayList</span>();<br>    Map <span class="hljs-built_in">map</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnCount</span>() != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//如果表中有数据，就开始查询</span><br>        <br>        <span class="hljs-comment">//循环到最后一个有数据的游标位置为止</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">moveToNext</span>()) &#123;<br>            <span class="hljs-comment">//每次要更新新的map</span><br>            <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>&lt;&gt;();<br>            Log.<span class="hljs-property">d</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;query: id = &quot;</span> + <span class="hljs-built_in">cursor</span>.<span class="hljs-property">getInt</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;id&quot;</span>)) + <span class="hljs-string">&quot;time = &quot;</span> +<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getString</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;time&quot;</span>)));<br>            <span class="hljs-type">int</span> id = <span class="hljs-built_in">cursor</span>.<span class="hljs-property">getInt</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;id&quot;</span>));<br>            <span class="hljs-built_in">map</span>.<span class="hljs-property">put</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getInt</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;id&quot;</span>)));<br>            <span class="hljs-built_in">map</span>.<span class="hljs-property">put</span>(<span class="hljs-string">&quot;time&quot;</span>,<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getString</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;time&quot;</span>)));<br>            arrayList.<span class="hljs-property">add</span>(<span class="hljs-built_in">map</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arrayList;<br>&#125;<br><span class="hljs-comment">//返回的是包含查询到的记录的ArrayList</span><br></code></pre></td></tr></table></figure><p>按id查询数据：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs processing">@<span class="hljs-title function_">SuppressLint</span>(<span class="hljs-string">&quot;Range&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">ArrayList</span>&lt;Map&gt; <span class="hljs-title function_">query</span>(<span class="hljs-type">int</span> id) &#123;<br>    db = sql.<span class="hljs-property">getReadableDatabase</span>();<br>    <span class="hljs-comment">//cursor加上id的条件</span><br>    Cursor <span class="hljs-built_in">cursor</span> = db.<span class="hljs-property">query</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new </span><span class="hljs-class title_">String</span>[]&#123;id+<span class="hljs-string">&quot;&quot;</span>&#125;,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">ArrayList</span>&lt;Map&gt; arrayList = <span class="hljs-keyword">new </span><span class="hljs-class title_">ArrayList</span>&lt;&gt;();<br>    Map <span class="hljs-built_in">map</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">moveToNext</span>()) &#123;<br>        <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>();<br>        Log.<span class="hljs-property">d</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;query: id = &quot;</span> + <span class="hljs-built_in">cursor</span>.<span class="hljs-property">getString</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;id&quot;</span>))+<span class="hljs-string">&quot;time = &quot;</span>+<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;time&quot;</span>));<br>        <span class="hljs-built_in">map</span>.<span class="hljs-property">put</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getString</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;id&quot;</span>)));<br>        <span class="hljs-built_in">map</span>.<span class="hljs-property">put</span>(<span class="hljs-string">&quot;time&quot;</span>,<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getString</span>(<span class="hljs-built_in">cursor</span>.<span class="hljs-property">getColumnIndex</span>(<span class="hljs-string">&quot;time&quot;</span>)));<br>        arrayList.<span class="hljs-property">add</span>(<span class="hljs-built_in">map</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> arrayList;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Update-更新、修改"><a href="#Update-更新、修改" class="headerlink" title="Update 更新、修改"></a>Update 更新、修改</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span>(<span class="hljs-keyword">String</span> table, ContentValues <span class="hljs-keyword">values</span>, <span class="hljs-keyword">String</span> whereClause, <span class="hljs-keyword">String</span>[] whereArgs)<br>//参数：第一个表名，第二个ContentValues，第三个whereClause，满足whereClause子句的记录将会被删除，第四个占位符传值，用于为子句传入数据<br></code></pre></td></tr></table></figure><p>根据id更新某条数据：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> updata(<span class="hljs-type">int</span> id,String <span class="hljs-type">time</span>,<span class="hljs-type">double</span> temperature) &#123;<br>    db = <span class="hljs-keyword">sql</span>.getReadableDatabase();<br>    ContentValues contentValues = <span class="hljs-built_in">new</span> ContentValues();<br>    contentValues.put(&quot;time&quot;,<span class="hljs-type">time</span>);fvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv<br>    contentValues.put(&quot;temperature&quot;,temperature);<br>    db.<span class="hljs-keyword">update</span>(&quot;data&quot;,contentValues,&quot;id = ?&quot;,<span class="hljs-built_in">new</span> String[] &#123;id+&quot;&quot;&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Delete-删除"><a href="#Delete-删除" class="headerlink" title="Delete 删除"></a>Delete 删除</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span>(<span class="hljs-keyword">String</span> table, <span class="hljs-keyword">String</span> whereClause, <span class="hljs-keyword">String</span>[] whereArgs)<br>//参数：第一个表名，第二个<span class="hljs-keyword">where</span>，满足<span class="hljs-keyword">where</span>子句的记录将会被删除，第三个占位符传值，用于为子句传入数据<br></code></pre></td></tr></table></figure><p>删除表中所有数据：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">delete</span>() &#123;<br>    db = <span class="hljs-keyword">sql</span>.getReadableDatabase();<br>    db.<span class="hljs-keyword">delete</span>(&quot;data&quot;,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>按id删除某条数据：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">delete</span>(<span class="hljs-type">int</span> id) &#123;<br>    db = <span class="hljs-keyword">sql</span>.getReadableDatabase();<br>    db.<span class="hljs-keyword">delete</span>(&quot;data&quot;.&quot;id = ?&quot;, <span class="hljs-built_in">new</span> String[] &#123;id+&quot;&quot;&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-其他注意事项"><a href="#5-其他注意事项" class="headerlink" title="5.其他注意事项"></a>5.其他注意事项</h4><p>如果需要更改表名，需要删除原来的数据库文件，或者手动卸载应用之后，再部署新的应用在手机上。</p><h4 id="6-使用及实例化"><a href="#6-使用及实例化" class="headerlink" title="6.使用及实例化"></a>6.使用及实例化</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">SQLite sqlite = <span class="hljs-keyword">new</span> <span class="hljs-type">SQLite</span>(MainActivity.<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h3 id="2-ListView"><a href="#2-ListView" class="headerlink" title="2.ListView"></a>2.ListView</h3><h4 id="1-新建单项的xml"><a href="#1-新建单项的xml" class="headerlink" title="1.新建单项的xml"></a>1.新建单项的xml</h4><p>和正常页面视图一样创建即可。格式是每一项的格式。</p><h4 id="2-在页面上添加ListView控件"><a href="#2-在页面上添加ListView控件" class="headerlink" title="2.在页面上添加ListView控件"></a>2.在页面上添加ListView控件</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;ListView<br>    android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/listview&quot;</span><br>    android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;900dp&quot;</span><br>    android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;600dp&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>宽高是整个ListView区域的宽高，如果数据超过了设置的区域，可以拖动查看。</p><h4 id="3-自定义适配器"><a href="#3-自定义适配器" class="headerlink" title="3.自定义适配器"></a>3.自定义适配器</h4><p>自定义的适配器类继承自BaseAdapter类</p><p>需要实现五个方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListViewAdapter</span> <span class="hljs-title">extends</span> <span class="hljs-title">BaseAdapter</span>&#123;<br><br><br>    ArrayList&lt;Map&gt; arrayList;<br>    LayoutInflater inflater;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arrayList</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseList(ArrayList&lt;Map&gt; arrayList, Context context) &#123;<br>        <span class="hljs-keyword">this</span>.arrayList = arrayList;<br>        <span class="hljs-comment">//传入从SQLmain.query()方法中获取到的ArrayList&lt;Map&gt;</span><br>        inflater = LayoutInflater.from(context);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 继承父类后需要重写的四个方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> int getCount() &#123;<br>        <span class="hljs-keyword">return</span> arrayList.size();<br>    &#125;<br>    <span class="hljs-comment">//首先 getCount() 获取Item 的个数</span><br>    <span class="hljs-comment">//一定要修改这个方法，否则ListView不知道有多少项，就不会显示</span><br><br><br>    <span class="hljs-comment">//getItem() getItemId() 调用ListView 的响应的方法的时候调用到。可以不修改</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object getItem(int i) &#123;<br>        <span class="hljs-keyword">return</span> arrayList.<span class="hljs-keyword">get</span>(i);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> long getItemId(int i) &#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br><br>    <span class="hljs-comment">//每绘制一次就调用一次getView() 方法，在getView 中将事先定义好的layout布局确定显示的效果并返回一个View对象作为一个Item 显示出来。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View getView(int i, View view, ViewGroup viewGroup) &#123;<br>        Data <span class="hljs-keyword">data</span>;<br>        <span class="hljs-comment">//如果没有这一项的视图，就创建，没有就直接setTag</span><br>        <span class="hljs-keyword">if</span>(view == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//加载布局为一个视图</span><br>            <span class="hljs-keyword">data</span> = new Data();<br>            view = inflater.inflate(R.layout.data_item,<span class="hljs-literal">null</span>);<span class="hljs-comment">//这里的布局是单项的布局</span><br>            <span class="hljs-comment">//在view 视图中查找 组件</span><br>            <span class="hljs-keyword">data</span>.textview_id = view.findViewById(R.id.tv_id);<br>            <span class="hljs-keyword">data</span>.textview_time = view.findViewById(R.id.tv_time);<br>            view.setTag(<span class="hljs-keyword">data</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">data</span> = (Data) view.getTag();<br>        &#125;<br><br><br>        <span class="hljs-comment">//为Item 里面的组件设置相应的数据</span><br>        Map map = arrayList.<span class="hljs-keyword">get</span>(i);<br>        <span class="hljs-keyword">data</span>.textview_id.setText(map.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">data</span>.textview_time.setText((String) map.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;time&quot;</span>));<br><br><br>        <span class="hljs-comment">//返回含有数据的view</span><br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br><br><br>    <span class="hljs-comment">//在点击事件里直接调用这个方法，把arraylist赋值给适配器对象（刷新时用）</span><br>    <span class="hljs-keyword">public</span> void refresh(ArrayList&lt;Map&gt; arrayList) &#123;<br>        <span class="hljs-keyword">this</span>.arrayList = arrayList;<br>        <span class="hljs-keyword">this</span>.notifyDataSetChanged();<br>     &#125;<br><br><br>    <span class="hljs-comment">//自定义的内部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>        TextView textview_id;<br>        TextView textview_time;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-实例化适配器类，设置适配器"><a href="#4-实例化适配器类，设置适配器" class="headerlink" title="4.实例化适配器类，设置适配器"></a>4.实例化适配器类，设置适配器</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">LsitView listView = find<span class="hljs-constructor">ViewById(R.<span class="hljs-params">id</span>.<span class="hljs-params">listview</span>)</span>;<br>ListViewAdapter listViewAdapter = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ListViewAdapter(<span class="hljs-params">sqlMain</span>.<span class="hljs-params">query</span>()</span>,this);<br><span class="hljs-comment">//给listview设置适配器</span><br>listView.set<span class="hljs-constructor">Adapter(<span class="hljs-params">listViewAdapter</span>)</span>;<br></code></pre></td></tr></table></figure><h4 id="5-调用适配器类方法"><a href="#5-调用适配器类方法" class="headerlink" title="5.调用适配器类方法"></a>5.调用适配器类方法</h4><p>在三个按钮的点击事件中添加这行：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//刷新listview视图（数据库内容有变的时候调用）</span><br>listViewAdapter.<span class="hljs-built_in">ref</span>resh(sqlMain.query());<br></code></pre></td></tr></table></figure><h1 id="常用SQL语句"><a href="#常用SQL语句" class="headerlink" title="常用SQL语句"></a>常用SQL语句</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> data(id <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> autoincrement, <span class="hljs-type">time</span> <span class="hljs-type">text</span>, temperature <span class="hljs-type">text</span>)<br></code></pre></td></tr></table></figure><p>创建一张名为data的表。包含三个字段，id（int型），time，temperature（text型）</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> temperature <span class="hljs-keyword">from</span> data <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> id = <span class="hljs-number">33</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-type">time</span> <span class="hljs-keyword">desc</span><br></code></pre></td></tr></table></figure><p>将data表中id为1或33的temp数据，通过time倒序排列</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> temperature from data where time =&lt; <span class="hljs-number">2023</span>-<span class="hljs-number">8</span>-<span class="hljs-number">7</span> <span class="hljs-number">13</span>:<span class="hljs-number">20</span>:<span class="hljs-number">05</span> and time &gt;= <span class="hljs-number">2023</span>-<span class="hljs-number">8</span>-<span class="hljs-number">7</span> <span class="hljs-number">13</span>:<span class="hljs-number">20</span>:<span class="hljs-number">05</span>  order by time desc<br></code></pre></td></tr></table></figure><p>将data表中time从aaa到bbb时间段内所有的temp数据，按time倒序排列</p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h3 id="保留两位小数"><a href="#保留两位小数" class="headerlink" title="保留两位小数"></a>保留两位小数</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">double temp = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BigDecimal</span>.</span></span>value<span class="hljs-constructor">Of(2.837584953)</span>.set<span class="hljs-constructor">Scale(2, BigDecimal.ROUND_HALF_UP)</span>.double<span class="hljs-constructor">Value()</span>;<br><span class="hljs-comment">//setScale(保留几位小数, 取整方式)</span><br><span class="hljs-comment">//BigDecimal.ROUND_HALF_UP 向上取整</span><br></code></pre></td></tr></table></figure><h3 id="数字类型转字符串类型"><a href="#数字类型转字符串类型" class="headerlink" title="数字类型转字符串类型"></a>数字类型转字符串类型</h3><p>加<code>+&quot;&quot;</code>即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">tv_temp.set<span class="hljs-constructor">Text(<span class="hljs-params">temp</span>+<span class="hljs-string">&quot;&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="自定义时间格式类"><a href="#自定义时间格式类" class="headerlink" title="自定义时间格式类"></a>自定义时间格式类</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NowTime</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> <span class="hljs-type">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    <span class="hljs-comment">//新建时间格式实例，yyyy表示完整的年份，MM表示月份，dd表示日期，HH表示24小时制小时，hh表示12小时制，mm表示分钟，ss表示秒数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> NowTime()&#123;<br>        simpleDateFormat.setTimeZone(TimeZone.getTimeZone(<span class="hljs-string">&quot;GMT+8&quot;</span>));<br>        <span class="hljs-comment">//修改时区信息（东八区）</span><br>        <span class="hljs-keyword">return</span> simpleDateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-type">Date</span>());<br>        <span class="hljs-comment">//Date()可以获得时间值，但是不一定是中国的时区。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用NowTime.NowTime()方法，就可以获得自定义格式的时间（String类型）</p><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="⭐子线程"><a href="#⭐子线程" class="headerlink" title="⭐子线程"></a>⭐子线程</h2><p>两种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * while(true)&#123;&#125;</span><br><span class="hljs-comment">         * 无限循环</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;);<br>                           <br><span class="hljs-comment">//写在onCreate()等方法外面</span><br></code></pre></td></tr></table></figure><h5 id="1-定时器"><a href="#1-定时器" class="headerlink" title="1.定时器"></a>1.定时器</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Thread.sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-regexp">//</span><span class="hljs-number">1000</span>为<span class="hljs-number">1</span>秒，<span class="hljs-number">100</span>为<span class="hljs-number">0.1</span>秒<br></code></pre></td></tr></table></figure><h5 id="2-控制开关"><a href="#2-控制开关" class="headerlink" title="2.控制开关"></a>2.控制开关</h5><p>在<code>while(true)&#123;&#125;</code>中添加一个boolean变量，默认为false：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">boolean control <span class="hljs-operator">=</span> false<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>只有在需要开启的时候再将control设置为true，再开启线程<code>thread.start();</code></p><h5 id="3-开启与关闭"><a href="#3-开启与关闭" class="headerlink" title="3.开启与关闭"></a>3.开启与关闭</h5><p>子线程开启的位置选择很关键：比如循环获取zigbee数据之前，要确保zigbee建立了连接，所以应该在建立连接成功的判断分支里开启子线程。</p><hr><h2 id="⭐委托机制更改ui"><a href="#⭐委托机制更改ui" class="headerlink" title="⭐委托机制更改ui"></a>⭐委托机制更改ui</h2><p>子线程中不能直接更改ui，如果需要修改，需要借助委托机制，在委托机制中修改。</p><h6 id="1-创建Handler对象"><a href="#1-创建Handler对象" class="headerlink" title="1.创建Handler对象"></a>1.创建Handler对象</h6><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">Handler <span class="hljs-keyword">handler</span> = <span class="hljs-keyword">new</span> Handler(<span class="hljs-keyword">new</span> Handler.Callback() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">handleMessage</span><span class="hljs-params">(@NonNull Message message)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(message.what == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            修改ui</span><br><span class="hljs-comment">            tv_temp.setText(&quot;温度：&quot; + temp + &quot;℃&quot;);</span><br><span class="hljs-comment">            tv_hum.setText(&quot;湿度：&quot; + hum);</span><br><span class="hljs-comment">            */</span><br>        &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(message.what == <span class="hljs-number">2</span>)</span></span>&#123;<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h6 id="2-启动委托机制"><a href="#2-启动委托机制" class="headerlink" title="2.启动委托机制"></a>2.启动委托机制</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//发送委托信息，显示温湿度<br>Message msg <span class="hljs-operator">=</span> new Message()<span class="hljs-comment">;</span><br>msg.what <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>handler.sendMessage(msg)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h3 id="1-开灯关灯"><a href="#1-开灯关灯" class="headerlink" title="1.开灯关灯"></a>1.开灯关灯</h3><h5 id="1-设置监听器"><a href="#1-设置监听器" class="headerlink" title="1.设置监听器"></a>1.设置监听器</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">tb_lamp.set<span class="hljs-constructor">OnCheckedChangeListener(<span class="hljs-params">new</span> CompoundButton.OnCheckedChangeListener()</span> &#123;<br>    @Override<br>    public void on<span class="hljs-constructor">CheckedChanged(CompoundButton <span class="hljs-params">compoundButton</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">b</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(b) &#123;<br>            iv_lamp.set<span class="hljs-constructor">BackgroundResource(R.<span class="hljs-params">mipmap</span>.<span class="hljs-params">lamp_on</span>)</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            iv_lamp.set<span class="hljs-constructor">BackgroundResource(R.<span class="hljs-params">mipmap</span>.<span class="hljs-params">lamp_off</span>)</span>;<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="2-布局"><a href="#2-布局" class="headerlink" title="2.布局"></a>2.布局</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;ToggleButton<br>    android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/tb_lamp&quot;</span><br>    android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">textOff</span>=<span class="hljs-string">&quot;打开灯泡&quot;</span><br>    android:<span class="hljs-attribute">textOn</span>=<span class="hljs-string">&quot;关闭灯泡&quot;</span>/&gt;<br><br><br>&lt;ImageView<br>    android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/iv_lamp&quot;</span><br>    android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="2-帧动画"><a href="#2-帧动画" class="headerlink" title="2.帧动画"></a>2.帧动画</h3><h5 id="1-新建AnimationDrawable对象"><a href="#1-新建AnimationDrawable对象" class="headerlink" title="1.新建AnimationDrawable对象"></a>1.新建AnimationDrawable对象</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">AnimationDrawable animationDrawable <span class="hljs-operator">=</span> (AnimationDrawable) iv_fan.getBackground()<span class="hljs-comment">;</span><br>//每次使用一个新的帧动画都需要新建一个AnimationDrawable对象<br></code></pre></td></tr></table></figure><h5 id="2-设置监听器"><a href="#2-设置监听器" class="headerlink" title="2.设置监听器"></a>2.设置监听器</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript">tb_fan.<span class="hljs-title function_">setOnCheckedChangeListener</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CompoundButton</span>.<span class="hljs-title class_">OnCheckedChangeListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onCheckedChanged</span>(<span class="hljs-params">CompoundButton compoundButton, <span class="hljs-built_in">boolean</span> b</span>) &#123;<br>        <span class="hljs-keyword">if</span>(b) &#123;<br>            animationDrawable.<span class="hljs-title function_">start</span>();<br>            <span class="hljs-comment">//使用animationDrawable时layout文件中设置background属性，不要设置src属性覆盖，如果没有background会有空指针异常</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            animationDrawable.<span class="hljs-title function_">stop</span>();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3-动画文件"><a href="#3-动画文件" class="headerlink" title="3.动画文件"></a>3.动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">animation-list</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:oneshot</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_2&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_3&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_4&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">animation-list</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-控件"><a href="#4-控件" class="headerlink" title="4.控件"></a>4.控件</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;ImageView<br>    android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/iv_fan&quot;</span><br>    android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">background</span>=<span class="hljs-string">&quot;@drawable/fan&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>用动画作为background属性</p><h3 id="3-设置控件是否可见"><a href="#3-设置控件是否可见" class="headerlink" title="3.设置控件是否可见"></a>3.设置控件是否可见</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">iv_open.setVisibility(View.INVISIBLE);  <span class="hljs-regexp">//</span>不可见<br>iv_close.setVisibility(View.VISIBLE);   <span class="hljs-regexp">//</span>可见<br></code></pre></td></tr></table></figure><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h3 id="1-ToggleButton"><a href="#1-ToggleButton" class="headerlink" title="1.ToggleButton"></a>1.ToggleButton</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;ToggleButton<br>    android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/tb_lamp&quot;</span><br>    android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">textOff</span>=<span class="hljs-string">&quot;打开灯泡&quot;</span><br>    android:<span class="hljs-attribute">textOn</span>=<span class="hljs-string">&quot;关闭灯泡&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>ToggleButton的监听器方法名称为 setOnCheckedChangeListener()</p><hr><h3 id="2-帧动画的布局"><a href="#2-帧动画的布局" class="headerlink" title="2.帧动画的布局"></a>2.帧动画的布局</h3><h6 id="1-animation-list"><a href="#1-animation-list" class="headerlink" title="1.animation-list"></a>1.animation-list</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">animation-list</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:oneshot</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_2&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_3&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_4&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/pic_cartoon_fan_5&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;80&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">animation-list</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">oneshot  false-&gt;循环播放帧动画  true-&gt;只播放一遍</span><br><span class="hljs-comment">duration表示时间间隔</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-imageview"><a href="#2-imageview" class="headerlink" title="2.imageview"></a>2.imageview</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;ImageView<br>    android:<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;@+id/iv_fan&quot;</span><br>    android:<span class="hljs-attribute">layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span><br>    android:<span class="hljs-attribute">background</span>=<span class="hljs-string">&quot;@drawable/fan&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>不用设置src，会覆盖掉动画。设置background为动画布局即可。不设置会出现空指针异常。</p><hr><h3 id="3-自定义背景样式"><a href="#3-自定义背景样式" class="headerlink" title="3. 自定义背景样式"></a>3. 自定义背景样式</h3><p>使用selector标签-&gt;item-&gt;shape</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shape</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">solid</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;#fff&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--填充背景颜色--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">stroke</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;#000&quot;</span> <span class="hljs-attr">android:width</span>=<span class="hljs-string">&quot;2dp&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--边框颜色--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">corners</span> <span class="hljs-attr">android:radius</span>=<span class="hljs-string">&quot;5dp&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--设置圆角--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">shape</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure><p>整个文件在drawable文件夹里，需要使用这个自定义样式的控件将android:background&#x3D;””属性设置为引用这个文件即可。</p><hr><h3 id="4-Image读取本地图片"><a href="#4-Image读取本地图片" class="headerlink" title="4.Image读取本地图片"></a>4.Image读取本地图片</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">imageView.set<span class="hljs-constructor">ImageURI(Uri.<span class="hljs-params">fromFile</span>(<span class="hljs-params">new</span> File(<span class="hljs-string">&quot;/sdcard/DCIM/&quot;</span>+<span class="hljs-params">map</span>.<span class="hljs-params">get</span>(<span class="hljs-string">&quot;file&quot;</span>)</span>)));<br></code></pre></td></tr></table></figure><p>File()内的路径是拼凑的，前半部分的路径之后一定要记得加&#x2F;</p><hr>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
